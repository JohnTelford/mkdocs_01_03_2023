{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Updated: Dec 26, 2022 Purpose The purpose of Iterative Website Development is to minimize website projects life time costs Iterative website development is done by different teams with different responsibilities and skills. The Define, Design, Develop, Deploy and Maintenance team members create, test and Remediating Defects \u200b. All team members may be operational at the same time without interfering with each other, or the production website, during the lifetime of the website Each team member frequently deploys their work to a private Preview internet website for stakeholders to quickly view and give feedback Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Iterative website development"},{"location":"MKDocs/","text":"MkDocs.md Material for MkDocs a static site generator Documentation that simply works Write your documentation in Markdown and create a professional static site in minutes \u2013 searchable, customizable, for all devices.","title":"MKDocs"},{"location":"company/","text":"Company \u00b6 I am the sole proprietor of JohnTelford.com LLC technology consulting company, working with client development projects for more that 30 years. Collaboration \u00b6 A seasoned, knowledgeable, industry professional, Electronics, Software, and Web engineer specializing in web hardware and software technology disciplines, Architecture, Architecture, and Deployment. Practitioner with extensive experience across most IT functional groups Ability to effectively collaborate to accomplish multidiscipline goals: Senior management teams External and internal clients Functional groups Individual contributors Vendors Nuggets \u00b6 Way back when the Internet web browsers and programming languages came along, I became interested in web technologies, and began learn by doing technology deep dives. I have years of learning some ever changing Electronics, Internet, and Software technologies by hands-on experiencing the technologies du jour I have a passion pursuing what\u2019s new and improved with these industries. Checking out what\u2019s new or not, a pipe dream or not, or what\u2019s new and improved, is like panning for gold. Buried within the mountains of info rubble produced daily, every so often one finds interesting technology nuggets making the effort worthwhile. I use the Hype Curve as a guide","title":"Company"},{"location":"company/#company","text":"I am the sole proprietor of JohnTelford.com LLC technology consulting company, working with client development projects for more that 30 years.","title":"Company"},{"location":"company/#collaboration","text":"A seasoned, knowledgeable, industry professional, Electronics, Software, and Web engineer specializing in web hardware and software technology disciplines, Architecture, Architecture, and Deployment. Practitioner with extensive experience across most IT functional groups Ability to effectively collaborate to accomplish multidiscipline goals: Senior management teams External and internal clients Functional groups Individual contributors Vendors","title":"Collaboration"},{"location":"company/#nuggets","text":"Way back when the Internet web browsers and programming languages came along, I became interested in web technologies, and began learn by doing technology deep dives. I have years of learning some ever changing Electronics, Internet, and Software technologies by hands-on experiencing the technologies du jour I have a passion pursuing what\u2019s new and improved with these industries. Checking out what\u2019s new or not, a pipe dream or not, or what\u2019s new and improved, is like panning for gold. Buried within the mountains of info rubble produced daily, every so often one finds interesting technology nuggets making the effort worthwhile. I use the Hype Curve as a guide","title":"Nuggets"},{"location":"contact/","text":"title :Contact \u00b6 Info A labyrinth symbolizes possible difficulties reaching website project goals. My knowledge and experience with website technology disciplines may be helpful. John Telford Portland, Oregon JohnTelford.com LLC phone : text 503-312-7248 Email","title":"Contact"},{"location":"contact/#title-contact","text":"Info A labyrinth symbolizes possible difficulties reaching website project goals. My knowledge and experience with website technology disciplines may be helpful. John Telford Portland, Oregon JohnTelford.com LLC phone : text 503-312-7248 Email","title":"title :Contact"},{"location":"danger/","text":"Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Danger"},{"location":"defect_remediation_cost/","text":"The highest cost over the life time of website projects is remediating defects. Content and software defects cost less when found early, as this chart shows: Defect Remediation Costs \u00b6 The early defect detection mechanisms built into Iterative Development and MkDocs site generator are: VScode editor tool extensions continually check for syntax and other errors Fast refresh live-editing quickly showing changes and any runtime errors while typing Team members deploy their copy of the project repository with their changes, to private websites where stakeholders can see them and give feedback. See Preview Deployments Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Defect Remediation Costs\u200b"},{"location":"defect_remediation_cost/#defect-remediation-costs","text":"The early defect detection mechanisms built into Iterative Development and MkDocs site generator are: VScode editor tool extensions continually check for syntax and other errors Fast refresh live-editing quickly showing changes and any runtime errors while typing Team members deploy their copy of the project repository with their changes, to private websites where stakeholders can see them and give feedback. See Preview Deployments Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Defect Remediation Costs"},{"location":"dev_stack_details/","text":"GitHub and Git Details \u00b6 A Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project GitHub Workflow \u00b6 GitHub workflow is centered on Pull Request The GitHub workflow works with collaborating team members contributing to the central project repository using the Forks. It is centered on the topic Branches workflow. A summary of GitHub workflow for each team member is: Fork the central project repository creating a local project repository in individual team members GitHub account Clone the forked local project repository in team member GitHub account to workstation Creates a topic Branch off the cloned local project repository main branch Make topic edits and commits Push after each commit to the cloned local project repository in GitHub account Periodically Pull from the central project repository. The develop branch will have merged accepted Pull Requests Periodically deploy local project repository to a private Preview website without disturbing other developers work or the production version, for stake holders viewing and feedback. This reduces the Pull Request evaluation time because stake holders interested in topics can see how they are progressing and working with the website. Open a Pull Request on the GitHub local project repository to begin the process of integrating the local project repository with the central project repository Team members discuss, and optionally continue committing on Pull Requests. Git Details \u00b6 Git is not the same as GitHub. GitHub makes tools that use Git.### The Project Gatekeeper Merges or closes Pull Requests to the central project repository, and deploys the central project repository to a private Preview website for stack holders viewing. The teams and gatekeeper continues the GitHub workflow process until stack holders agree the central project repository is ready for release to the public internet Teams may Pull the central project repository at anytime to view and test other topic branches. Reference \u00b6 What is Git and GitHub GitHub Git VScode \u00b6 Introduction Videos","title":"Dev Stack Details"},{"location":"dev_stack_details/#github-and-git-details","text":"A Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project","title":"GitHub and Git Details"},{"location":"dev_stack_details/#github-workflow","text":"GitHub workflow is centered on Pull Request The GitHub workflow works with collaborating team members contributing to the central project repository using the Forks. It is centered on the topic Branches workflow. A summary of GitHub workflow for each team member is: Fork the central project repository creating a local project repository in individual team members GitHub account Clone the forked local project repository in team member GitHub account to workstation Creates a topic Branch off the cloned local project repository main branch Make topic edits and commits Push after each commit to the cloned local project repository in GitHub account Periodically Pull from the central project repository. The develop branch will have merged accepted Pull Requests Periodically deploy local project repository to a private Preview website without disturbing other developers work or the production version, for stake holders viewing and feedback. This reduces the Pull Request evaluation time because stake holders interested in topics can see how they are progressing and working with the website. Open a Pull Request on the GitHub local project repository to begin the process of integrating the local project repository with the central project repository Team members discuss, and optionally continue committing on Pull Requests.","title":"GitHub Workflow"},{"location":"dev_stack_details/#git-details","text":"Git is not the same as GitHub. GitHub makes tools that use Git.### The Project Gatekeeper Merges or closes Pull Requests to the central project repository, and deploys the central project repository to a private Preview website for stack holders viewing. The teams and gatekeeper continues the GitHub workflow process until stack holders agree the central project repository is ready for release to the public internet Teams may Pull the central project repository at anytime to view and test other topic branches.","title":"Git Details"},{"location":"dev_stack_details/#reference","text":"What is Git and GitHub GitHub Git","title":"Reference"},{"location":"dev_stack_details/#vscode","text":"Introduction Videos","title":"VScode"},{"location":"development_tools/","text":"VScode \u00b6 Visual Studio Code (VScode) is a Microsoft product. It has become the goto editor for many. It is free, built on open source, and runs everywhere. VScode is the command and control center for the website development stack. The development command and control tasks are: Editing Markdown and Markdown web programming materials Use git and GitHub to manage project files. Git is built-in and optimized to work with Microsoft GitHub Editor tool extensions continually check for syntax and other errors Live edit browser previews show how edits will look when deployed Deploy secure website previews to the Internet for stakeholders Deploy production website to the Internet Built-in command shell And much more Extensions \u00b6 Useful extensions are: Dark+ Material. The default Dark+ theme, using Material's color palette ESlint. Integrates ESLint JavaScript into VS Code GitHub Repositories. Remotely browse and edit any GitHub repository Lorem Text Generator Lorem text generator extension for VScode Markdown All in One All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more) Rainbow Brackets Provide rainbow colors for the round brackets, the square brackets and the squiggly brackets Todo Tree This extension quickly searches the local repository workspace for comment tags like TODO and FIXME, and displays them in a tree view in the activity bar VScode -icons Icons for Visual Studio Code Git Client \u00b6 VScode built-in git commands : Review diffs, Stage files Make commits Push pull and more Git Desktop \u00b6 An alternative to using these built-in VScode commands is to use GitHub Desktop . It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. GitHub Desktop and VSCode documents how to use GitHub Desktop with VScode . Git and GitHub References \u00b6 :::tip These Git and Github references contain concepts and commands: Version Control System VScode built-in gitg commands Git version-control tools in Visual Studio Code Git and GitHub Introduction Git GitHub GitHub Desktop ::: GitHub \u00b6 The core technologies of Iterative Development are, Git and GitHub. The central project repository is controlled by the project gatekeeper, and a content delivery network, like Cloudflare , where Internet production websites and individual team private Preview Internet websites, are deployed. GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. It helps answer the questions for the lifetime of the project who changed what, where, when, and why? Team members use the Website Development Stack to develop and deploy websites to the Internet. The GitHub Workflow \u00b6 GitHub workflow is centered on Pull Request The GitHub workflow works with collaborating team members contributing to the central project repository using the Forks. It is centered on the topic Branches workflow. A summary of GitHub workflow for each team member is: Fork the central project repository creating a local project repository in individual team members GitHub account Clone the forked local project repository in team member GitHub account to workstation Creates a topic Branch off the cloned local project repository main branch Make topic edits and commits Push after each commit to the cloned local project repository in GitHub account Periodically Pull from the central project repository. The develop branch will have merged accepted Pull Requests Periodically deploy local project repository to a private Preview website without disturbing other developers work or the production version, for stake holders viewing and feedback. This reduces the Pull Request evaluation time because stake holders interested in topics can see how they are progressing and working with the website. Open a Pull Request on the GitHub local project repository to begin the process of integrating the local project repository with the central project repository Team members discuss, and optionally continue committing on Pull Requests. The project gatekeeper merges or closes Pull Requests to the central project repository, and deploys the central project repository to a private Preview website for stack holders viewing. The teams and gatekeeper continues the GitHub workflow process until stack holders agree the central project repository is ready for release to the public internet Teams may Pull the central project repository at anytime to view and test other topic branches. Git \u00b6 Git Tutorial Fork \u00b6 Git GitHub Fork A fork is a copy of the project repository in a team member's GitHub account. Forks let team members make changes to a project without affecting the original repository or other team members. Team members can fetch updates from the project repository with a pull command Forks are used to either propose changes to someone else's project to which you do not have write access, or to use someone else's project as a starting point for your own idea. You can fork a repository to create a copy of the repository and make changes without affecting the upstream repository Forking a repository is similar to copying a repository, with two major differences: You can use a pull request to suggest changes from your user-owned fork to the original repository in its GitHub instance, also known as the upstream repository. You can bring changes from the upstream repository to your local fork by synchronizing your fork with the upstream repository. Fork a Repo Clone \u00b6 Git Clone from GitHub A clone is a full copy of a repository, including all logging and versions of files, copied from the team member GitHub account to team member workstation. Commits keep the team member local project repository up to date on the workstation and on GitHub. If the workstation copy is damaged, the latest commit can be cloned from GitHubto the workstation. Branch \u00b6 Git Branch Creating a branch is to safely diverge from a line of development and continuing on another. An example is creating a branch create a feature or to test a radical idea Branching enables working on different parts of a project without impacting other branches. Work on a branch can be merged with other project branches. Switching between branches and work on different projects without them interfering with each other. Branching in Git is lightweight and fast! Checkout \u00b6 Switch \u00b6 Switches to a new branch A quick way of switching branch on Git is to use the git switch command and specify the name of the branch you want to switch. If the destination branch does not exist, you have to specify the \u201c-c\u201d option (for \u201ccreate branch\u201c), otherwise you will get an error message when switching to that branch. $ git switch $ git switch -c Again, as an example, let\u2019s say that you want to switch to the \u201cfeature\u201d branch from the \u201cmaster\u201d branch. In order to switch from the \u201cmaster\u201d branch to the \u201cfeature\u201d branch, use the \u201cgit switch\u201d command and specify the destination branch (which is \u201cfeature\u201d in this case) $ git switch feature switch branch using git switch On the other hand, if you try to switch to a non existing branch, you will get the following error message $ git switch non-existing-branch fatal: invalid reference: non-existing-branch To solve this error, make sure to append the \u201c-c\u201d option to the \u201cgit switch\u201d command to specify that you want to switch to a new branch. $ git switch -c non-existing-branch Switched to a new branch 'non-existing-branch' Congratulations, you have now successfully switched to another branch and you can start working on it. Git Desktop \u00b6 Git Desktop is an alternative to using VScode built-in Git commands. It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. It is a Microsoft product available on Mac and Windows. GitHub Desktop and VSCode documents explain how to use GitHub Desktop with VScode . iA Writer \u00b6 Editing Markdown / MDX website pages and blog posts using iA Writer is faster because of focus and grammar features with live preview. iA Writer is a Markdown Writing app: Faster way to write MDX website material Extensive Style Check Focus Sentence Paragraph Available for Mac, iOS, Windows, and Android The Mac iA Writer stores files in iCloud. They are available for editing using supported devices when there is an internet connection. Chronosync \u00b6 When one or more pages have been edited using iA Writer , the ChronoSync Mac app is used to synchronize files between iA Writer and the local repository. Since the iA Writer files are store in iCloud, they are available for editing using supported devices when there is an internet connection. If edits have been made to files the local repository, use ChronoSync to synchronize them to iA Writer. Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Development Tools"},{"location":"development_tools/#vscode","text":"Visual Studio Code (VScode) is a Microsoft product. It has become the goto editor for many. It is free, built on open source, and runs everywhere. VScode is the command and control center for the website development stack. The development command and control tasks are: Editing Markdown and Markdown web programming materials Use git and GitHub to manage project files. Git is built-in and optimized to work with Microsoft GitHub Editor tool extensions continually check for syntax and other errors Live edit browser previews show how edits will look when deployed Deploy secure website previews to the Internet for stakeholders Deploy production website to the Internet Built-in command shell And much more","title":"VScode"},{"location":"development_tools/#extensions","text":"Useful extensions are: Dark+ Material. The default Dark+ theme, using Material's color palette ESlint. Integrates ESLint JavaScript into VS Code GitHub Repositories. Remotely browse and edit any GitHub repository Lorem Text Generator Lorem text generator extension for VScode Markdown All in One All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more) Rainbow Brackets Provide rainbow colors for the round brackets, the square brackets and the squiggly brackets Todo Tree This extension quickly searches the local repository workspace for comment tags like TODO and FIXME, and displays them in a tree view in the activity bar VScode -icons Icons for Visual Studio Code","title":"Extensions"},{"location":"development_tools/#git-client","text":"VScode built-in git commands : Review diffs, Stage files Make commits Push pull and more","title":"Git Client"},{"location":"development_tools/#git-desktop","text":"An alternative to using these built-in VScode commands is to use GitHub Desktop . It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. GitHub Desktop and VSCode documents how to use GitHub Desktop with VScode .","title":"Git Desktop"},{"location":"development_tools/#git-and-github-references","text":":::tip These Git and Github references contain concepts and commands: Version Control System VScode built-in gitg commands Git version-control tools in Visual Studio Code Git and GitHub Introduction Git GitHub GitHub Desktop :::","title":"Git and GitHub References"},{"location":"development_tools/#github","text":"The core technologies of Iterative Development are, Git and GitHub. The central project repository is controlled by the project gatekeeper, and a content delivery network, like Cloudflare , where Internet production websites and individual team private Preview Internet websites, are deployed. GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. It helps answer the questions for the lifetime of the project who changed what, where, when, and why? Team members use the Website Development Stack to develop and deploy websites to the Internet.","title":"GitHub"},{"location":"development_tools/#the-github-workflow","text":"GitHub workflow is centered on Pull Request The GitHub workflow works with collaborating team members contributing to the central project repository using the Forks. It is centered on the topic Branches workflow. A summary of GitHub workflow for each team member is: Fork the central project repository creating a local project repository in individual team members GitHub account Clone the forked local project repository in team member GitHub account to workstation Creates a topic Branch off the cloned local project repository main branch Make topic edits and commits Push after each commit to the cloned local project repository in GitHub account Periodically Pull from the central project repository. The develop branch will have merged accepted Pull Requests Periodically deploy local project repository to a private Preview website without disturbing other developers work or the production version, for stake holders viewing and feedback. This reduces the Pull Request evaluation time because stake holders interested in topics can see how they are progressing and working with the website. Open a Pull Request on the GitHub local project repository to begin the process of integrating the local project repository with the central project repository Team members discuss, and optionally continue committing on Pull Requests. The project gatekeeper merges or closes Pull Requests to the central project repository, and deploys the central project repository to a private Preview website for stack holders viewing. The teams and gatekeeper continues the GitHub workflow process until stack holders agree the central project repository is ready for release to the public internet Teams may Pull the central project repository at anytime to view and test other topic branches.","title":"The GitHub Workflow"},{"location":"development_tools/#git","text":"Git Tutorial","title":"Git"},{"location":"development_tools/#fork","text":"Git GitHub Fork A fork is a copy of the project repository in a team member's GitHub account. Forks let team members make changes to a project without affecting the original repository or other team members. Team members can fetch updates from the project repository with a pull command Forks are used to either propose changes to someone else's project to which you do not have write access, or to use someone else's project as a starting point for your own idea. You can fork a repository to create a copy of the repository and make changes without affecting the upstream repository Forking a repository is similar to copying a repository, with two major differences: You can use a pull request to suggest changes from your user-owned fork to the original repository in its GitHub instance, also known as the upstream repository. You can bring changes from the upstream repository to your local fork by synchronizing your fork with the upstream repository. Fork a Repo","title":"Fork"},{"location":"development_tools/#clone","text":"Git Clone from GitHub A clone is a full copy of a repository, including all logging and versions of files, copied from the team member GitHub account to team member workstation. Commits keep the team member local project repository up to date on the workstation and on GitHub. If the workstation copy is damaged, the latest commit can be cloned from GitHubto the workstation.","title":"Clone"},{"location":"development_tools/#branch","text":"Git Branch Creating a branch is to safely diverge from a line of development and continuing on another. An example is creating a branch create a feature or to test a radical idea Branching enables working on different parts of a project without impacting other branches. Work on a branch can be merged with other project branches. Switching between branches and work on different projects without them interfering with each other. Branching in Git is lightweight and fast!","title":"Branch"},{"location":"development_tools/#checkout","text":"","title":"Checkout"},{"location":"development_tools/#switch","text":"Switches to a new branch A quick way of switching branch on Git is to use the git switch command and specify the name of the branch you want to switch. If the destination branch does not exist, you have to specify the \u201c-c\u201d option (for \u201ccreate branch\u201c), otherwise you will get an error message when switching to that branch. $ git switch $ git switch -c Again, as an example, let\u2019s say that you want to switch to the \u201cfeature\u201d branch from the \u201cmaster\u201d branch. In order to switch from the \u201cmaster\u201d branch to the \u201cfeature\u201d branch, use the \u201cgit switch\u201d command and specify the destination branch (which is \u201cfeature\u201d in this case) $ git switch feature switch branch using git switch On the other hand, if you try to switch to a non existing branch, you will get the following error message $ git switch non-existing-branch fatal: invalid reference: non-existing-branch To solve this error, make sure to append the \u201c-c\u201d option to the \u201cgit switch\u201d command to specify that you want to switch to a new branch. $ git switch -c non-existing-branch Switched to a new branch 'non-existing-branch' Congratulations, you have now successfully switched to another branch and you can start working on it.","title":"Switch"},{"location":"development_tools/#git-desktop_1","text":"Git Desktop is an alternative to using VScode built-in Git commands. It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. It is a Microsoft product available on Mac and Windows. GitHub Desktop and VSCode documents explain how to use GitHub Desktop with VScode .","title":"Git Desktop"},{"location":"development_tools/#ia-writer","text":"Editing Markdown / MDX website pages and blog posts using iA Writer is faster because of focus and grammar features with live preview. iA Writer is a Markdown Writing app: Faster way to write MDX website material Extensive Style Check Focus Sentence Paragraph Available for Mac, iOS, Windows, and Android The Mac iA Writer stores files in iCloud. They are available for editing using supported devices when there is an internet connection.","title":"iA Writer"},{"location":"development_tools/#chronosync","text":"When one or more pages have been edited using iA Writer , the ChronoSync Mac app is used to synchronize files between iA Writer and the local repository. Since the iA Writer files are store in iCloud, they are available for editing using supported devices when there is an internet connection. If edits have been made to files the local repository, use ChronoSync to synchronize them to iA Writer. Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Chronosync"},{"location":"git-github/","text":"GitHub \u00b6 The Iterative Development core technologies of are GitHub and Git: GitHub \u00b6 GitHub helps answer the questions Who Changed What, Where, When, and Why ? for the lifetime of the project The GitHub Website Repository is controlled by a team member project gatekeeper Content delivery network (CDN) like Cloudflare , deploying private Preview Internet websites, production websites, and individual team members private Preview websites. Git \u00b6 Git is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. Team members use the Website Development Stack to develop and deploy websites to the Internet. The GitHub Workflow \u00b6 GitHub workflow is centered on Pull Requests . The GitHub workflow works with collaborating tightly-knit team members contributing to the central project repository using the Forks . It is centered on the topic Branches workflow. A summary of GitHub workflow for each team member is: Fork the central project repository creating a local project repository in individual team members GitHub account Clone the forked local project repository in team member GitHub account to workstation Creates a topic branch off the cloned local project repository develop branch Make topic edits and commits Push after each commit to the cloned local project repository in GitHub account Periodicity Pull from the central project repository. The develop branch will have merged accepted Pull Request Deploy local project repository to a private Preview website periodically for stake holders viewing. This reduces the Pull Request evaluation time because stake holders interested in topics can see how they are progressing and working with the website. Open a Pull Request on the GitHub local project repository to begin the process of integrating the local project repository with the central project repository Team members discuss, and optionally continue committing on Pull Requests . The project gatekeeper merges or closes Pull Requests to the central project repository, and deploys the central project repository to a private Preview website website for stack holders viewing. The teams and gatekeeper continues the GitHub workflow process until stack holders agree the central project repository is ready for release to the public internet Teams may Pull the central project repository at anytime to view and test other topic branches. Git \u00b6 Basic Git Commands \u00b6 Git Tutorial Fork \u00b6 Git GitHub Fork A fork is a copy of the project repository in a team member's GitHub account. Forks let team members make changes to a project without affecting the original repository or other team members. Team members can fetch updates from the project repository with a pull command Forks are used to either propose changes to someone else's project to which you do not have write access, or to use someone else's project as a starting point for your own idea. You can fork a repository to create a copy of the repository and make changes without affecting the upstream repository Forking a repository is similar to copying a repository, with two major differences: You can use a pull request to suggest changes from your user-owned fork to the original repository in its GitHub instance, also known as the upstream repository. You can bring changes from the upstream repository to your local fork by synchronizing your fork with the upstream repository. Fork a Repo Clone \u00b6 Git Clone from GitHub A clone is a full copy of a repository, including all logging and versions of files, copied from the team member GitHub account to team member workstation. Commits keep the team member local project repository up to date on the workstation and on GitHub. If the workstation copy is damaged, the latest commit can be cloned from GitHubto the workstation. Branch \u00b6 Git Branch Creating a branch is to safely diverge from a line of development and continuing on another. An example is creating a branch create a feature or to test a radical idea Branching enables working on different parts of a project without impacting other branches. Work on a branch can be merged with other project branches. Switching between branches and work on different projects without them interfering with each other. Branching in Git is lightweight and fast! Checkout \u00b6 Switch \u00b6 switches to a new branch A quick way of switching branch on Git is to use the \u201cgit switch\u201d command and specify the name of the branch you want to switch to. If the destination branch does not exist, you have to specify the \u201c-c\u201d option (for \u201ccreate branch\u201c), otherwise you will get an error message when switching to that branch. $ git switch $ git switch -c Again, as an example, let\u2019s say that you want to switch to the \u201cfeature\u201d branch from the \u201cmaster\u201d branch. In order to switch from the \u201cmaster\u201d branch to the \u201cfeature\u201d branch, use the \u201cgit switch\u201d command and specify the destination branch (which is \u201cfeature\u201d in this case) $ git switch feature switch branch using git switch On the other hand, if you try to switch to a non existing branch, you will get the following error message $ git switch non-existing-branch fatal: invalid reference: non-existing-branch To solve this error, make sure to append the \u201c-c\u201d option to the \u201cgit switch\u201d command to specify that you want to switch to a new branch. $ git switch -c non-existing-branch Switched to a new branch 'non-existing-branch' Congratulations, you have now successfully switched to another branch and you can start working on it. Stage \u00b6 Git Staging Environment One of the core functions of Git is the concepts of the Staging Environment, and the Commit. Staged files are files that are ready to be committed to the repository. Commit \u00b6 Git Commit Commits keep track of project changes. A message is required. Who changed what, where, when, and why is logged to the project history. Commit messages matter. Here's How to Write a Git Commit Message . Push \u00b6 Git Push to GitHub Pull \u00b6 Pull Request \u00b6 Pull requests let teams tell others about changes that have been pushed to a branch in their GitHub account forked project repository. Once a pull request is opened by the project team gatekeeper, teams can discuss and review the potential changes with collaborators and add follow-up commits before changes are merged into the website central project repository. About pull requests :::tip The VScode development environment has several of these and other Git command built-in ::: Restore \u00b6 restores a previous version of a file while staying on the same branch Git Utilities \u00b6","title":"Git and Github"},{"location":"git-github/#github","text":"The Iterative Development core technologies of are GitHub and Git:","title":"GitHub"},{"location":"git-github/#github_1","text":"GitHub helps answer the questions Who Changed What, Where, When, and Why ? for the lifetime of the project The GitHub Website Repository is controlled by a team member project gatekeeper Content delivery network (CDN) like Cloudflare , deploying private Preview Internet websites, production websites, and individual team members private Preview websites.","title":"GitHub"},{"location":"git-github/#git","text":"Git is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. Team members use the Website Development Stack to develop and deploy websites to the Internet.","title":"Git"},{"location":"git-github/#the-github-workflow","text":"GitHub workflow is centered on Pull Requests . The GitHub workflow works with collaborating tightly-knit team members contributing to the central project repository using the Forks . It is centered on the topic Branches workflow. A summary of GitHub workflow for each team member is: Fork the central project repository creating a local project repository in individual team members GitHub account Clone the forked local project repository in team member GitHub account to workstation Creates a topic branch off the cloned local project repository develop branch Make topic edits and commits Push after each commit to the cloned local project repository in GitHub account Periodicity Pull from the central project repository. The develop branch will have merged accepted Pull Request Deploy local project repository to a private Preview website periodically for stake holders viewing. This reduces the Pull Request evaluation time because stake holders interested in topics can see how they are progressing and working with the website. Open a Pull Request on the GitHub local project repository to begin the process of integrating the local project repository with the central project repository Team members discuss, and optionally continue committing on Pull Requests . The project gatekeeper merges or closes Pull Requests to the central project repository, and deploys the central project repository to a private Preview website website for stack holders viewing. The teams and gatekeeper continues the GitHub workflow process until stack holders agree the central project repository is ready for release to the public internet Teams may Pull the central project repository at anytime to view and test other topic branches.","title":"The GitHub Workflow"},{"location":"git-github/#git_1","text":"","title":"Git"},{"location":"git-github/#basic-git-commands","text":"Git Tutorial","title":"Basic Git Commands"},{"location":"git-github/#fork","text":"Git GitHub Fork A fork is a copy of the project repository in a team member's GitHub account. Forks let team members make changes to a project without affecting the original repository or other team members. Team members can fetch updates from the project repository with a pull command Forks are used to either propose changes to someone else's project to which you do not have write access, or to use someone else's project as a starting point for your own idea. You can fork a repository to create a copy of the repository and make changes without affecting the upstream repository Forking a repository is similar to copying a repository, with two major differences: You can use a pull request to suggest changes from your user-owned fork to the original repository in its GitHub instance, also known as the upstream repository. You can bring changes from the upstream repository to your local fork by synchronizing your fork with the upstream repository. Fork a Repo","title":"Fork"},{"location":"git-github/#clone","text":"Git Clone from GitHub A clone is a full copy of a repository, including all logging and versions of files, copied from the team member GitHub account to team member workstation. Commits keep the team member local project repository up to date on the workstation and on GitHub. If the workstation copy is damaged, the latest commit can be cloned from GitHubto the workstation.","title":"Clone"},{"location":"git-github/#branch","text":"Git Branch Creating a branch is to safely diverge from a line of development and continuing on another. An example is creating a branch create a feature or to test a radical idea Branching enables working on different parts of a project without impacting other branches. Work on a branch can be merged with other project branches. Switching between branches and work on different projects without them interfering with each other. Branching in Git is lightweight and fast!","title":"Branch"},{"location":"git-github/#checkout","text":"","title":"Checkout"},{"location":"git-github/#switch","text":"switches to a new branch A quick way of switching branch on Git is to use the \u201cgit switch\u201d command and specify the name of the branch you want to switch to. If the destination branch does not exist, you have to specify the \u201c-c\u201d option (for \u201ccreate branch\u201c), otherwise you will get an error message when switching to that branch. $ git switch $ git switch -c Again, as an example, let\u2019s say that you want to switch to the \u201cfeature\u201d branch from the \u201cmaster\u201d branch. In order to switch from the \u201cmaster\u201d branch to the \u201cfeature\u201d branch, use the \u201cgit switch\u201d command and specify the destination branch (which is \u201cfeature\u201d in this case) $ git switch feature switch branch using git switch On the other hand, if you try to switch to a non existing branch, you will get the following error message $ git switch non-existing-branch fatal: invalid reference: non-existing-branch To solve this error, make sure to append the \u201c-c\u201d option to the \u201cgit switch\u201d command to specify that you want to switch to a new branch. $ git switch -c non-existing-branch Switched to a new branch 'non-existing-branch' Congratulations, you have now successfully switched to another branch and you can start working on it.","title":"Switch"},{"location":"git-github/#stage","text":"Git Staging Environment One of the core functions of Git is the concepts of the Staging Environment, and the Commit. Staged files are files that are ready to be committed to the repository.","title":"Stage"},{"location":"git-github/#commit","text":"Git Commit Commits keep track of project changes. A message is required. Who changed what, where, when, and why is logged to the project history. Commit messages matter. Here's How to Write a Git Commit Message .","title":"Commit"},{"location":"git-github/#push","text":"Git Push to GitHub","title":"Push"},{"location":"git-github/#pull","text":"","title":"Pull"},{"location":"git-github/#pull-request","text":"Pull requests let teams tell others about changes that have been pushed to a branch in their GitHub account forked project repository. Once a pull request is opened by the project team gatekeeper, teams can discuss and review the potential changes with collaborators and add follow-up commits before changes are merged into the website central project repository. About pull requests :::tip The VScode development environment has several of these and other Git command built-in :::","title":"Pull Request"},{"location":"git-github/#restore","text":"restores a previous version of a file while staying on the same branch","title":"Restore"},{"location":"git-github/#git-utilities","text":"","title":"Git Utilities"},{"location":"glossary/","text":"Applications \u00b6 ChronoSync ChronoSync iA Writer iA Writer Visual Studio Code VScode Git and Github \u00b6 git \u00b6 git git-workflow What is git ### GitHub GitHub What is GitHub Central Repository \u00b6 Central Repository is a central project repepository located at GitHub Clone \u00b6 User makes the changes and push back to their own forked repository. Fork \u00b6 Fork User creates a copy of a private repository to their own GitHub account. Changes can not be directly applied to the forked repository. A pull request must be made. Pull Request \u00b6 A user sends the changes to the forked repository. This process is called as Pull Request in Git. The repository guardian and possible other team members are notified of the pull request. They will accept or modify the changes and apply them to the forked repository, or reject the them. Programming \u00b6 CSS CSS HTML HTML JavaScript JavaScript MDX MDX Troika Troika Minimum Viable Product \u00b6 The first goal of website development projects is a Minimum Viable Product Preview Deployments \u00b6 As team members makes changes to their repository clone, they may deploy their local repository to a private Internet website for stakeholders to preview and give feedback. The repository guardian and other team members evaluating a pull request may deploy the branch of the central repository they are working on to a private Internet website for stakeholders to preview and give feedback. When the pull request team and stakeholders are satisfied the updated production changes are ready for deployment, the repository guardian deploys the updated production version of the website to a private Internet website for stakeholders to preview and give feedback. When the stakeholders are satisfied with the updated production version, the repository guardian deploys the updated production version of the website to the Internet See Cloudflare Rollbacks \u00b6 Rollbacks enables the repository guardian to quickly revert the website project to a previous production deployment. See Cloudflare Web Components \u00b6 JSX JSX MDX MDX React React","title":"Glossary"},{"location":"glossary/#applications","text":"ChronoSync ChronoSync iA Writer iA Writer Visual Studio Code VScode","title":"Applications"},{"location":"glossary/#git-and-github","text":"","title":"Git and Github"},{"location":"glossary/#git","text":"git git-workflow What is git ### GitHub GitHub What is GitHub","title":"git"},{"location":"glossary/#central-repository","text":"Central Repository is a central project repepository located at GitHub","title":"Central Repository"},{"location":"glossary/#clone","text":"User makes the changes and push back to their own forked repository.","title":"Clone"},{"location":"glossary/#fork","text":"Fork User creates a copy of a private repository to their own GitHub account. Changes can not be directly applied to the forked repository. A pull request must be made.","title":"Fork"},{"location":"glossary/#pull-request","text":"A user sends the changes to the forked repository. This process is called as Pull Request in Git. The repository guardian and possible other team members are notified of the pull request. They will accept or modify the changes and apply them to the forked repository, or reject the them.","title":"Pull Request"},{"location":"glossary/#programming","text":"CSS CSS HTML HTML JavaScript JavaScript MDX MDX Troika Troika","title":"Programming"},{"location":"glossary/#minimum-viable-product","text":"The first goal of website development projects is a Minimum Viable Product","title":"Minimum Viable Product"},{"location":"glossary/#preview-deployments","text":"As team members makes changes to their repository clone, they may deploy their local repository to a private Internet website for stakeholders to preview and give feedback. The repository guardian and other team members evaluating a pull request may deploy the branch of the central repository they are working on to a private Internet website for stakeholders to preview and give feedback. When the pull request team and stakeholders are satisfied the updated production changes are ready for deployment, the repository guardian deploys the updated production version of the website to a private Internet website for stakeholders to preview and give feedback. When the stakeholders are satisfied with the updated production version, the repository guardian deploys the updated production version of the website to the Internet See Cloudflare","title":"Preview Deployments"},{"location":"glossary/#rollbacks","text":"Rollbacks enables the repository guardian to quickly revert the website project to a previous production deployment. See Cloudflare","title":"Rollbacks"},{"location":"glossary/#web-components","text":"JSX JSX MDX MDX React React","title":"Web Components"},{"location":"hype_curve/","text":"Hype Curve \u00b6 The Hype Curve helps separate reality from fiction. Hype Curve Points of Interest \u00b6 The Hype Curve points of interest are: Technology Trigger A potential technology breakthrough happens. Peak of Inflated Expectations Early publicity produces a number of success stories and often accompanied by stories of failures. Some companies may take corrective action but most don\u2019t. Trough of Disillusionment Interest wanes as experiments and implementations fail to deliver on the hype. Slope of Enlightenment Technology consumers begin to understand the technology better and how it may benefit them. Plateau of Productivity Mainstream adoption starts to take off. Some technologies making it to the Plateau of Productivity may be doomed to the spiral of death by inattention to details of keeping products alive. Some Hype Curve Guesstimates \u00b6 Here are some of my guesstimates of where a few technologies are on their Hype Curve roller coster ride Some have crashed and burned, while others are will speeding to the Peak of Inflated Expectations where bubbles pop, while others are deflated and may make it to the Trough of Disillusionment. a few may have energy Every day there is more hype about technology. This is just a sampling: 5G Hype Big time 5G hype by major carriers, started its Hype Curve climb a few years ago at the Hype Curve Technology Trigger. A 2019 survey reported 5G hype is working as 1/3 of smartphone owners thought they had a 5G devices and service, but they didn't. Since then, major carriers have ramped up their hype machines and they are working. More 5G phones being are being sold now, but more smartphone owners think they have reliable 5G service, but they don't. A few of those with 5G smartphones are experiencing 5G service. Illinois has the top 5G availability of 27.6% of the time, representing the proportion of time those users with 5G devices and subscription had an active 5G connection. Higher urban population areas like Illinois is where the money is for major carriers. Some of the reasons for such service are the flavors of 5G. Low-Band Mid-Band High-Band The higher the band, the faster transmission speeds are, at the expense of distance and penetrating building materials. The High-Band has much higher speed, yet degrades traveling a few hundred feet of open space, and worsens if trees are on its path. Other questions are how will smartphones receive 5G indoors and will there be 5G WiFi? Self-driving Cars Self-driving cars , also known as an autonomous vehicles (AV), driverless car, Auto Pilot, Full Self-Driving, Super Cruise, robotic car (robo-car), and other marketing terms, are incorporating automation. One day, some may survive to reach the Hype Curve Plateau of Productivity and evolve into cars being capable of sensing its environment and moving safely with little or no human input. Some early entries who have survived their own smoke tests, entered the Hype Curve race. Some withdrew early and some have literally crashed, burned, killed, or disobey traffic laws, in their Hype Curve race. Levels of Autonomous Driving Levels of Autonomous Driving, Explained \"To set agreed-upon standards early in the transition to autonomous vehicles, the Society of Automotive Engineers (SAE) developed a classification system that defines the degree of driving automation a car and its equipment may offer. Ranging from levels zero to five, the driving automation spectrum begins with vehicles without this technology and ends with entirely self-driving vehicles. > If a vehicle has Level 0, Level 1, or Level 2 driver support systems, an active and engaged driver is required. She is always responsible for the vehicle\u2019s operation, must supervise the technology at all times, and must take complete control of the vehicle when necessary. In the future, if a vehicle has Level 3, Level 4, or Level 5 automated driving systems, the technology takes complete control of the driving without human supervision. However, with Level 3, if the vehicle alerts the driver and requests she takes control of the vehicle, she must be prepared and able to do so. As of 2022, no vehicles sold in the U.S. market have a Level 3, Level 4, or Level 5 automated driving system. All of them require an alert driver sitting in the driver\u2019s seat, ready to take control at any time. If you believe otherwise, you are mistaken, and it could cost you your life, the life of someone you love, or the life of an innocent bystander.\" Where We Are Regardless of what the self-driving car industry carnie barkers are shouting, the industry has a tough technology Hype Curve road ahead to get to Level 3, Level 4, or Level 5 automated driving systems. This is not a self-driving car . \"To be sure, there are thousands of autonomous test vehicles on the road, even some without human safety monitors behind the wheel, but anything for which you can plunk down your hard-earned cash is still just a regular car. Maybe it\u2019s a bit smarter than the cars you\u2019re normally used to, but it\u2019s still dumber than anything that can accurately describe itself as \u201cautonomous.\u201d And we need to be really clear about that.\" Maybe this is good advice Please make a dumb car \"Today\u2019s cars are dumb where they should be smart, and smart where they should be dumb. Enough already. Make a car that\u2019s pretty much all dumb and watch it sell \u2014 because what automakers are giving people is so bad, they\u2019ll pay more to have less of it.\" Metaverse Metaverse is the sum of all virtual spaces such as Virtual Reality and Augmented Reality . Facebook, oops Meta , states The metaverse is the next evolution of social connection. Our company's vision is to help bring the metaverse to life, so we are changing our name to reflect our commitment to this future. The metaverse will be social 3D spaces in the metaverse will let you socialize, learn, collaborate and play in ways that go beyond what we can imagine Is that hype or what? I think metaverse is just starting its roller coaster Hype Curve ride starting at the Technology Trigger point. Who knows, it could make it to the Plateau of Productivity in some form or other. I doubt it though, because of the many unknown thrills and spills awaiting it on its Hype Curve roller coaster ride.","title":"Hype Curve"},{"location":"hype_curve/#hype-curve","text":"The Hype Curve helps separate reality from fiction. Hype Curve","title":"Hype Curve"},{"location":"hype_curve/#points-of-interest","text":"The Hype Curve points of interest are: Technology Trigger A potential technology breakthrough happens. Peak of Inflated Expectations Early publicity produces a number of success stories and often accompanied by stories of failures. Some companies may take corrective action but most don\u2019t. Trough of Disillusionment Interest wanes as experiments and implementations fail to deliver on the hype. Slope of Enlightenment Technology consumers begin to understand the technology better and how it may benefit them. Plateau of Productivity Mainstream adoption starts to take off. Some technologies making it to the Plateau of Productivity may be doomed to the spiral of death by inattention to details of keeping products alive.","title":"Points of Interest"},{"location":"hype_curve/#some-hype-curve-guesstimates","text":"Here are some of my guesstimates of where a few technologies are on their Hype Curve roller coster ride Some have crashed and burned, while others are will speeding to the Peak of Inflated Expectations where bubbles pop, while others are deflated and may make it to the Trough of Disillusionment. a few may have energy Every day there is more hype about technology. This is just a sampling: 5G Hype Big time 5G hype by major carriers, started its Hype Curve climb a few years ago at the Hype Curve Technology Trigger. A 2019 survey reported 5G hype is working as 1/3 of smartphone owners thought they had a 5G devices and service, but they didn't. Since then, major carriers have ramped up their hype machines and they are working. More 5G phones being are being sold now, but more smartphone owners think they have reliable 5G service, but they don't. A few of those with 5G smartphones are experiencing 5G service. Illinois has the top 5G availability of 27.6% of the time, representing the proportion of time those users with 5G devices and subscription had an active 5G connection. Higher urban population areas like Illinois is where the money is for major carriers. Some of the reasons for such service are the flavors of 5G. Low-Band Mid-Band High-Band The higher the band, the faster transmission speeds are, at the expense of distance and penetrating building materials. The High-Band has much higher speed, yet degrades traveling a few hundred feet of open space, and worsens if trees are on its path. Other questions are how will smartphones receive 5G indoors and will there be 5G WiFi? Self-driving Cars Self-driving cars , also known as an autonomous vehicles (AV), driverless car, Auto Pilot, Full Self-Driving, Super Cruise, robotic car (robo-car), and other marketing terms, are incorporating automation. One day, some may survive to reach the Hype Curve Plateau of Productivity and evolve into cars being capable of sensing its environment and moving safely with little or no human input. Some early entries who have survived their own smoke tests, entered the Hype Curve race. Some withdrew early and some have literally crashed, burned, killed, or disobey traffic laws, in their Hype Curve race. Levels of Autonomous Driving Levels of Autonomous Driving, Explained \"To set agreed-upon standards early in the transition to autonomous vehicles, the Society of Automotive Engineers (SAE) developed a classification system that defines the degree of driving automation a car and its equipment may offer. Ranging from levels zero to five, the driving automation spectrum begins with vehicles without this technology and ends with entirely self-driving vehicles. > If a vehicle has Level 0, Level 1, or Level 2 driver support systems, an active and engaged driver is required. She is always responsible for the vehicle\u2019s operation, must supervise the technology at all times, and must take complete control of the vehicle when necessary. In the future, if a vehicle has Level 3, Level 4, or Level 5 automated driving systems, the technology takes complete control of the driving without human supervision. However, with Level 3, if the vehicle alerts the driver and requests she takes control of the vehicle, she must be prepared and able to do so. As of 2022, no vehicles sold in the U.S. market have a Level 3, Level 4, or Level 5 automated driving system. All of them require an alert driver sitting in the driver\u2019s seat, ready to take control at any time. If you believe otherwise, you are mistaken, and it could cost you your life, the life of someone you love, or the life of an innocent bystander.\" Where We Are Regardless of what the self-driving car industry carnie barkers are shouting, the industry has a tough technology Hype Curve road ahead to get to Level 3, Level 4, or Level 5 automated driving systems. This is not a self-driving car . \"To be sure, there are thousands of autonomous test vehicles on the road, even some without human safety monitors behind the wheel, but anything for which you can plunk down your hard-earned cash is still just a regular car. Maybe it\u2019s a bit smarter than the cars you\u2019re normally used to, but it\u2019s still dumber than anything that can accurately describe itself as \u201cautonomous.\u201d And we need to be really clear about that.\" Maybe this is good advice Please make a dumb car \"Today\u2019s cars are dumb where they should be smart, and smart where they should be dumb. Enough already. Make a car that\u2019s pretty much all dumb and watch it sell \u2014 because what automakers are giving people is so bad, they\u2019ll pay more to have less of it.\" Metaverse Metaverse is the sum of all virtual spaces such as Virtual Reality and Augmented Reality . Facebook, oops Meta , states The metaverse is the next evolution of social connection. Our company's vision is to help bring the metaverse to life, so we are changing our name to reflect our commitment to this future. The metaverse will be social 3D spaces in the metaverse will let you socialize, learn, collaborate and play in ways that go beyond what we can imagine Is that hype or what? I think metaverse is just starting its roller coaster Hype Curve ride starting at the Technology Trigger point. Who knows, it could make it to the Plateau of Productivity in some form or other. I doubt it though, because of the many unknown thrills and spills awaiting it on its Hype Curve roller coaster ride.","title":"Some Hype Curve Guesstimates"},{"location":"hype_guesstimates/","text":"Here are some of my Hype Curve guesstimates of where a few technologies are on their Hype Curve roller coster ride Some have crashed and burned, while others are will speeding to the Peak of Inflated Expectations where bubbles pop, while others are deflated and may make it to the Trough of Disillusionment. a few may have energy Every day there is more hype about technology. This is just a sampling: 5G Hype \u00b6 Big time 5G hype by major carriers, started its Hype Curve climb a few years ago at the Hype Curve Technology Trigger. A 2019 survey reported 5G hype is working as 1/3 of smartphone owners thought they had a 5G devices and service, but they didn't. Since then, major carriers have ramped up their hype machines and they are working. More 5G phones being are being sold now, but more smartphone owners think they have reliable 5G service, but they don't. A few of those with 5G smartphones are experiencing 5G service. Illinois has the top 5G availability of 27.6% of the time, representing the proportion of time those users with 5G devices and subscription had an active 5G connection. Higher urban population areas like Illinois is where the money is for major carriers. Some of the reasons for such service are the flavors of 5G. Low-Band Mid-Band High-Band The higher the band, the faster transmission speeds are, at the expense of distance and penetrating building materials. The High-Band has much higher speed, yet degrades traveling a few hundred feet of open space, and worsens if trees are on its path. Other questions are how will smartphones receive 5G indoors and will there be 5G WiFi? Self-driving Cars \u00b6 Self-driving cars , also known as an autonomous vehicles (AV), driverless car, Auto Pilot, Full Self-Driving, Super Cruise, robotic car (robo-car), and other marketing terms, are incorporating automation. One day, some may survive to reach the Hype Curve Plateau of Productivity and evolve into cars being capable of sensing its environment and moving safely with little or no human input. Some early entries who have survived their own smoke tests, entered the Hype Curve race. Some withdrew early and some have literally crashed, burned, killed, or disobey traffic laws, in their Hype Curve race. Levels of Autonomous Driving Explained To set agreed-upon standards early in the transition to autonomous vehicles, the Society of Automotive Engineers (SAE) developed a classification system that defines the degree of driving automation a car and its equipment may offer. Ranging from levels zero to five, the driving automation spectrum begins with vehicles without this technology and ends with entirely self-driving vehicles If a vehicle has Level 0, Level 1, or Level 2 driver support systems, an active and engaged driver is required. She is always responsible for the vehicle\u2019s operation, must supervise the technology at all times, and must take complete control of the vehicle when necessary. In the future, if a vehicle has Level 3, Level 4, or Level 5 automated driving systems, the technology takes complete control of the driving without human supervision. However, with Level 3, if the vehicle alerts the driver and requests she takes control of the vehicle, she must be prepared and able to do so. As of 2022, no vehicles sold in the U.S. market have a Level 3, Level 4, or Level 5 automated driving system. All of them require an alert driver sitting in the driver\u2019s seat, ready to take control at any time. If you believe otherwise, you are mistaken, and it could cost you your life, the life of someone you love, or the life of an innocent bystander.\" Where We Are Regardless of what the self-driving car industry carnie barkers are shouting, the industry has a tough technology Hype Curve road ahead to get to Level 3, Level 4, or Level 5 automated driving systems. This is not a self-driving car . \"To be sure, there are thousands of autonomous test vehicles on the road, even some without human safety monitors behind the wheel, but anything for which you can plunk down your hard-earned cash is still just a regular car. Maybe it\u2019s a bit smarter than the cars you\u2019re normally used to, but it\u2019s still dumber than anything that can accurately describe itself as \u201cautonomous.\u201d And we need to be really clear about that.\" Maybe this is good advice Please make a dumb car \"Today\u2019s cars are dumb where they should be smart, and smart where they should be dumb. Enough already. Make a car that\u2019s pretty much all dumb and watch it sell \u2014 because what automakers are giving people is so bad, they\u2019ll pay more to have less of it.\" Metaverse Metaverse is the sum of all virtual spaces such as Virtual Reality and Augmented Reality . Facebook, oops Meta , states: The metaverse is the next evolution of social connection. Our company's vision is to help bring the metaverse to life, so we are changing our name to reflect our commitment to this future. The metaverse will be social 3D spaces in the metaverse will let you socialize, learn, collaborate and play in ways that go beyond what we can imagine Is that hype or what? I think metaverse is just starting its roller coaster Hype Curve ride starting at the Technology Trigger point. Who knows, it could make it to the Plateau of Productivity in some form or other. I doubt it though, because of the many unknown thrills and spills awaiting it on its Hype Curve roller coaster ride.","title":"Hype Guesstimates"},{"location":"hype_guesstimates/#5g-hype","text":"Big time 5G hype by major carriers, started its Hype Curve climb a few years ago at the Hype Curve Technology Trigger. A 2019 survey reported 5G hype is working as 1/3 of smartphone owners thought they had a 5G devices and service, but they didn't. Since then, major carriers have ramped up their hype machines and they are working. More 5G phones being are being sold now, but more smartphone owners think they have reliable 5G service, but they don't. A few of those with 5G smartphones are experiencing 5G service. Illinois has the top 5G availability of 27.6% of the time, representing the proportion of time those users with 5G devices and subscription had an active 5G connection. Higher urban population areas like Illinois is where the money is for major carriers. Some of the reasons for such service are the flavors of 5G. Low-Band Mid-Band High-Band The higher the band, the faster transmission speeds are, at the expense of distance and penetrating building materials. The High-Band has much higher speed, yet degrades traveling a few hundred feet of open space, and worsens if trees are on its path. Other questions are how will smartphones receive 5G indoors and will there be 5G WiFi?","title":"5G Hype"},{"location":"hype_guesstimates/#self-driving-cars","text":"Self-driving cars , also known as an autonomous vehicles (AV), driverless car, Auto Pilot, Full Self-Driving, Super Cruise, robotic car (robo-car), and other marketing terms, are incorporating automation. One day, some may survive to reach the Hype Curve Plateau of Productivity and evolve into cars being capable of sensing its environment and moving safely with little or no human input. Some early entries who have survived their own smoke tests, entered the Hype Curve race. Some withdrew early and some have literally crashed, burned, killed, or disobey traffic laws, in their Hype Curve race. Levels of Autonomous Driving Explained To set agreed-upon standards early in the transition to autonomous vehicles, the Society of Automotive Engineers (SAE) developed a classification system that defines the degree of driving automation a car and its equipment may offer. Ranging from levels zero to five, the driving automation spectrum begins with vehicles without this technology and ends with entirely self-driving vehicles If a vehicle has Level 0, Level 1, or Level 2 driver support systems, an active and engaged driver is required. She is always responsible for the vehicle\u2019s operation, must supervise the technology at all times, and must take complete control of the vehicle when necessary. In the future, if a vehicle has Level 3, Level 4, or Level 5 automated driving systems, the technology takes complete control of the driving without human supervision. However, with Level 3, if the vehicle alerts the driver and requests she takes control of the vehicle, she must be prepared and able to do so. As of 2022, no vehicles sold in the U.S. market have a Level 3, Level 4, or Level 5 automated driving system. All of them require an alert driver sitting in the driver\u2019s seat, ready to take control at any time. If you believe otherwise, you are mistaken, and it could cost you your life, the life of someone you love, or the life of an innocent bystander.\" Where We Are Regardless of what the self-driving car industry carnie barkers are shouting, the industry has a tough technology Hype Curve road ahead to get to Level 3, Level 4, or Level 5 automated driving systems. This is not a self-driving car . \"To be sure, there are thousands of autonomous test vehicles on the road, even some without human safety monitors behind the wheel, but anything for which you can plunk down your hard-earned cash is still just a regular car. Maybe it\u2019s a bit smarter than the cars you\u2019re normally used to, but it\u2019s still dumber than anything that can accurately describe itself as \u201cautonomous.\u201d And we need to be really clear about that.\" Maybe this is good advice Please make a dumb car \"Today\u2019s cars are dumb where they should be smart, and smart where they should be dumb. Enough already. Make a car that\u2019s pretty much all dumb and watch it sell \u2014 because what automakers are giving people is so bad, they\u2019ll pay more to have less of it.\" Metaverse Metaverse is the sum of all virtual spaces such as Virtual Reality and Augmented Reality . Facebook, oops Meta , states: The metaverse is the next evolution of social connection. Our company's vision is to help bring the metaverse to life, so we are changing our name to reflect our commitment to this future. The metaverse will be social 3D spaces in the metaverse will let you socialize, learn, collaborate and play in ways that go beyond what we can imagine Is that hype or what? I think metaverse is just starting its roller coaster Hype Curve ride starting at the Technology Trigger point. Who knows, it could make it to the Plateau of Productivity in some form or other. I doubt it though, because of the many unknown thrills and spills awaiting it on its Hype Curve roller coaster ride.","title":"Self-driving Cars"},{"location":"iawriterref/","text":"","title":"iA Writer"},{"location":"languagesref/","text":"Info Website development languages are used to create website material such as text and graphics, and for configuring and using website development tools such as, VScode , Git , GitHub , Docusaurus , and Cloudflare . These languages are nonhuman, abstract logical structures, and strict languages. The slightest errors or security issues during development will require remediation sometime during the life time of the website. Several development languages and tools detect errors. Developer created abstract logical structures, and user interface designs problems, may be mitigated by developers frequent deploying their work to private Preview Internet websites for team members viewing and feedback. Website Development Stack \u00b6 Info The Iterative Website Development Stack illustrates how websites are developed and deployed to the Internet. It is web browser agnostic. What works for big screens, works for small screens. The key technologies are GitHub and git . ::: Team members use the Website Development Stack to develop and deploy websites to the Internet. There would be confusion and defects created if Team members were to directly make changes to the same project repository. A solution to this problem is to have one central repository controlled by a gatekeeper. Each team member forks a copy to their GetHub account and makes a clone of it on their workstation. GitHub \u00b6 The core of Iterative Development is the GitHub central project repository controlled by the project gatekeeper. GitHub is a Distributed Version Control Systems enabling multiple teams to work separately without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. It helps answer the questions for the lifetime of the project who changed what, where, when, and why? Team members use the Website Development Stack to develop and deploy websites to the Internet. The GitHub Flow \u00b6 GitHub workflow centered on Pull Requests . The GitHub flow works with collaborating tightly-knit team in a central project repository, or a globally distributed company or network of strangers contributing to a project through dozens of Forks . It is centered on the topic Branches workflow. A summary of GitHub flow for each team member is: Fork the central project repository to create local project repository in GitHub account Clone the forked local project repository in team member GitHub account to a workstation Creates a topic branch off the cloned local project repository main branch Make edits and commits Push after each commit to the cloned local project repository in GitHub account Deploy local project repository to a private Preview website for stake holders viewing Open a Pull Request on the GitHub local project repository to begin the process of integrating the local project repository with the central project repository Team members discuss, and optionally continue committing on Pull Requests . The project gatekeeper merges or closes the Pull Requests to the central project repository, and deploys the central project repository to a private Preview website for stack holders viewing. The teams and gatekeeper continues the GitHub Flow process until stack holders agree the central project repository is ready for release to the public internet Teams may Pull the central project repository at anytime to view and test other topic branches. Git \u00b6 Git Basic Git Commands \u00b6 Branch \u00b6 Creating a branch is to safely diverge from a line of development and continuing on another. An example is creating a branch to test a radical idea Fork \u00b6 A fork is copying the central website project repository to a team member GitHub accounts. Teams make changes to the website project repository publicly as a way to contribute in a more open manner. A fork is a copy of the project repository in a team member's GitHub account. Forks let teams make changes to a project without affecting the original repository or other team members. Teams can fetch updates from the project repository with a pull command from or submit changes using the Pull Requests About Forks Pull \u00b6 Pull Request \u00b6 Pull requests let teams tell others about changes that have been pushed to a branch in their GitHub account forked project repository. Once a pull request is opened by the project team gatekeeper, teams can discuss and review the potential changes with collaborators and add follow-up commits before changes are merged into the website central project repository. About pull requests Push \u00b6 :::tip The VScode development environment has these and other Git command built-in ::: Website Development Languages \u00b6 Troika \u00b6 :::info Troika is a team of three web website programming languages that have become standard for creating website pages, HTML , CSS , and JavaScript . They are interpreted by web browsers to render website pages. ::: The job of website development frameworks such as Docusaurus is to compile the troika and non troika programming languages, such as React, JSX, and MDX into the standard troika languages for web browsers. HTML \u00b6 Hypertext Markup Language HTML is used to create websites. It is the standard markup language for browser website pages. It defines the content and structure of website pages. HTML can be assisted by Cascading Style Sheets ( CSS ) to instruct browsers how elements are to be styled and rendered, and JavaScript is for user interactivity. CSS \u00b6 CSS instructs browsers how elements are to be styled and rendered. CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML JavaScript \u00b6 Not to be confused with the Java programming language. JavaScript is used to make webpages interactive. It is the programming language of the web. It is the most popular website programming language choice for the million of programmers globally. It is a high-level language, flexible and expressive enough to write website applications. It has many advantages. It is dynamically typed, requires no compile step, and has a huge ecosystem that provides powerful frameworks, libraries, and other tools. JavaScript is one of the core technologies of website Troika website programming. It enables interactive web pages and is an essential part of web applications. All contemporary web browsers have a dedicated JavaScript virtual machine built-inn to execute it. Web Component Era \u00b6 :::info Web Development Components For The Component Era. Web Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation. ::: Web components are a set of web platform APIs that enables creating new custom, reusable, encapsulated HTML tags to use in web pages and web apps. Based on existing web standards. They enable web developers to extend HTML with new elements with encapsulated styling and custom behavior. React \u00b6 React is for building user interfaces (UIs). It is an open-source, front end, JavaScript library created by Facebook. React is a declarative, efficient, and flexible JavaScript library. It enables creating complex UIs from small and isolated pieces of code called \u201ccomponents\u201d. React code is made of entities called components. Components can be rendered to a particular element. A component is the core building block of a React application. Every component resides in the same space, but works independently from one another and merges all them in a parent component, which is the final UI of the application.\" JSX \u00b6 The core development technology of Docusaurus and React is JavaScript . React has created JSX, a syntax extension to JavaScript. JSX is not part of the web programming languages Troika . Browsers do not understand how to render JSX. React created a compiler to transform JSX code into standard JavaScript at build time. JSX (JavaScript XML), is a React syntax extension to the JavaScript language. It is similar to a template language, but it has full power of JavaScript. It is similar in appearance to HTML , JSX provides a way to structure component rendering using syntax familiar to many developers. React components are written using JSX. React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display. Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with cohesive components that contain both. MDX \u00b6 MDX is Markdown for the component era. It enables seamlessly writing JSX in Markdown documents. It is compiled to JSX components, It enables using Markdown\u2019s terse syntax for writing website material, and JSX for components. Markdown is a faster way of creating and maintaining website material. It is a HTLM abstraction that is compiled to web standard HTML John Gruber published the original Markdown Syntax Guide. Different flavors of Markdown have evolved since then. \"Markdown is a better way to write HTML. It is compiled into HTML at deploy time. Markdown is a lightweight plaintext markup language used to add formatting elements to documents. Markdown is now one of the world\u2019s popular markup languages. Using Markdown is different from using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown is not like that. In a Markdown-formatted file. Markdown syntax is added to the text to indicate which words and phrases look different.\" Markdown has been characterized by an informal specification and a reference implementation for conversion to HTML. Over time, many Markdown implementations have appeared. They are driven by the need for additional features like tables, footnotes, definition lists, and HTML inside Markdown blocks. The behavior of additional features diverge from the reference implementation and informal specification, and have attracted attention. Not all flavors of Markdown are compatible or supported by all frameworks. I'm hesitant creating website material without using a version of Markdown. My preference is using MDX. \u2764\ufe0f Powerful: MDX blends markdown and JSX syntax to fit perfectly in React/JSX-based projects. \ud83d\udcbb Everything is a component: Use existing components inside MDX file and import other MDX files as plain components. \ud83d\udd27 Customizable: Decide which component is rendered for each markdown element. \ud83d\udcda Markdown-based: The simplicity and elegance of markdown remains, JSX is interleaved when you want to. \ud83d\udd25 Blazingly blazing fast: MDX has no runtime, all compilation occurs during the build stage.\" Meta Open Source \u00b6 Meta Open Source This website is built with some Meta Open Source software components. Docusaurus \u00b6 Docusaurus generator. It is an open-source website framework created and open-sourced by Meta Open Source . It builds a single-page application with a fast client-side navigation, leveraging React to make websites interactive. Learn more Docusaurus Project Details Features Features this author likes about Docusaurus are: Powered by React , JSX and MDX Extend and customize with React Hot web browser reloading with fast incremental build on edit changes Route-based code and data splitting Heading anchor links Check all links during build process Check for errors by building deployment website on local server, using the same process as the deployment server Local Search - Small and is downloaded to browsers Menus Leftside - menu bar Blog left side - posts Rightside - page / post table of contents","title":"Development Languages"},{"location":"languagesref/#website-development-stack","text":"Info The Iterative Website Development Stack illustrates how websites are developed and deployed to the Internet. It is web browser agnostic. What works for big screens, works for small screens. The key technologies are GitHub and git . ::: Team members use the Website Development Stack to develop and deploy websites to the Internet. There would be confusion and defects created if Team members were to directly make changes to the same project repository. A solution to this problem is to have one central repository controlled by a gatekeeper. Each team member forks a copy to their GetHub account and makes a clone of it on their workstation.","title":"Website Development Stack"},{"location":"languagesref/#github","text":"The core of Iterative Development is the GitHub central project repository controlled by the project gatekeeper. GitHub is a Distributed Version Control Systems enabling multiple teams to work separately without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. It helps answer the questions for the lifetime of the project who changed what, where, when, and why? Team members use the Website Development Stack to develop and deploy websites to the Internet.","title":"GitHub"},{"location":"languagesref/#the-github-flow","text":"GitHub workflow centered on Pull Requests . The GitHub flow works with collaborating tightly-knit team in a central project repository, or a globally distributed company or network of strangers contributing to a project through dozens of Forks . It is centered on the topic Branches workflow. A summary of GitHub flow for each team member is: Fork the central project repository to create local project repository in GitHub account Clone the forked local project repository in team member GitHub account to a workstation Creates a topic branch off the cloned local project repository main branch Make edits and commits Push after each commit to the cloned local project repository in GitHub account Deploy local project repository to a private Preview website for stake holders viewing Open a Pull Request on the GitHub local project repository to begin the process of integrating the local project repository with the central project repository Team members discuss, and optionally continue committing on Pull Requests . The project gatekeeper merges or closes the Pull Requests to the central project repository, and deploys the central project repository to a private Preview website for stack holders viewing. The teams and gatekeeper continues the GitHub Flow process until stack holders agree the central project repository is ready for release to the public internet Teams may Pull the central project repository at anytime to view and test other topic branches.","title":"The GitHub Flow"},{"location":"languagesref/#git","text":"Git","title":"Git"},{"location":"languagesref/#basic-git-commands","text":"","title":"Basic Git Commands"},{"location":"languagesref/#branch","text":"Creating a branch is to safely diverge from a line of development and continuing on another. An example is creating a branch to test a radical idea","title":"Branch"},{"location":"languagesref/#fork","text":"A fork is copying the central website project repository to a team member GitHub accounts. Teams make changes to the website project repository publicly as a way to contribute in a more open manner. A fork is a copy of the project repository in a team member's GitHub account. Forks let teams make changes to a project without affecting the original repository or other team members. Teams can fetch updates from the project repository with a pull command from or submit changes using the Pull Requests About Forks","title":"Fork"},{"location":"languagesref/#pull","text":"","title":"Pull"},{"location":"languagesref/#pull-request","text":"Pull requests let teams tell others about changes that have been pushed to a branch in their GitHub account forked project repository. Once a pull request is opened by the project team gatekeeper, teams can discuss and review the potential changes with collaborators and add follow-up commits before changes are merged into the website central project repository. About pull requests","title":"Pull Request"},{"location":"languagesref/#push","text":":::tip The VScode development environment has these and other Git command built-in :::","title":"Push"},{"location":"languagesref/#website-development-languages","text":"","title":"Website Development Languages"},{"location":"languagesref/#troika","text":":::info Troika is a team of three web website programming languages that have become standard for creating website pages, HTML , CSS , and JavaScript . They are interpreted by web browsers to render website pages. ::: The job of website development frameworks such as Docusaurus is to compile the troika and non troika programming languages, such as React, JSX, and MDX into the standard troika languages for web browsers.","title":"Troika"},{"location":"languagesref/#html","text":"Hypertext Markup Language HTML is used to create websites. It is the standard markup language for browser website pages. It defines the content and structure of website pages. HTML can be assisted by Cascading Style Sheets ( CSS ) to instruct browsers how elements are to be styled and rendered, and JavaScript is for user interactivity.","title":"HTML"},{"location":"languagesref/#css","text":"CSS instructs browsers how elements are to be styled and rendered. CSS (Cascading Style Sheets) is a stylesheet language used to describe the presentation of a document written in HTML","title":"CSS"},{"location":"languagesref/#javascript","text":"Not to be confused with the Java programming language. JavaScript is used to make webpages interactive. It is the programming language of the web. It is the most popular website programming language choice for the million of programmers globally. It is a high-level language, flexible and expressive enough to write website applications. It has many advantages. It is dynamically typed, requires no compile step, and has a huge ecosystem that provides powerful frameworks, libraries, and other tools. JavaScript is one of the core technologies of website Troika website programming. It enables interactive web pages and is an essential part of web applications. All contemporary web browsers have a dedicated JavaScript virtual machine built-inn to execute it.","title":"JavaScript"},{"location":"languagesref/#web-component-era","text":":::info Web Development Components For The Component Era. Web Components are independent and reusable bits of code. They serve the same purpose as JavaScript functions, but work in isolation. ::: Web components are a set of web platform APIs that enables creating new custom, reusable, encapsulated HTML tags to use in web pages and web apps. Based on existing web standards. They enable web developers to extend HTML with new elements with encapsulated styling and custom behavior.","title":"Web Component Era"},{"location":"languagesref/#react","text":"React is for building user interfaces (UIs). It is an open-source, front end, JavaScript library created by Facebook. React is a declarative, efficient, and flexible JavaScript library. It enables creating complex UIs from small and isolated pieces of code called \u201ccomponents\u201d. React code is made of entities called components. Components can be rendered to a particular element. A component is the core building block of a React application. Every component resides in the same space, but works independently from one another and merges all them in a parent component, which is the final UI of the application.\"","title":"React"},{"location":"languagesref/#jsx","text":"The core development technology of Docusaurus and React is JavaScript . React has created JSX, a syntax extension to JavaScript. JSX is not part of the web programming languages Troika . Browsers do not understand how to render JSX. React created a compiler to transform JSX code into standard JavaScript at build time. JSX (JavaScript XML), is a React syntax extension to the JavaScript language. It is similar to a template language, but it has full power of JavaScript. It is similar in appearance to HTML , JSX provides a way to structure component rendering using syntax familiar to many developers. React components are written using JSX. React embraces the fact that rendering logic is inherently coupled with other UI logic: how events are handled, how the state changes over time, and how the data is prepared for display. Instead of artificially separating technologies by putting markup and logic in separate files, React separates concerns with cohesive components that contain both.","title":"JSX"},{"location":"languagesref/#mdx","text":"MDX is Markdown for the component era. It enables seamlessly writing JSX in Markdown documents. It is compiled to JSX components, It enables using Markdown\u2019s terse syntax for writing website material, and JSX for components. Markdown is a faster way of creating and maintaining website material. It is a HTLM abstraction that is compiled to web standard HTML John Gruber published the original Markdown Syntax Guide. Different flavors of Markdown have evolved since then. \"Markdown is a better way to write HTML. It is compiled into HTML at deploy time. Markdown is a lightweight plaintext markup language used to add formatting elements to documents. Markdown is now one of the world\u2019s popular markup languages. Using Markdown is different from using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown is not like that. In a Markdown-formatted file. Markdown syntax is added to the text to indicate which words and phrases look different.\" Markdown has been characterized by an informal specification and a reference implementation for conversion to HTML. Over time, many Markdown implementations have appeared. They are driven by the need for additional features like tables, footnotes, definition lists, and HTML inside Markdown blocks. The behavior of additional features diverge from the reference implementation and informal specification, and have attracted attention. Not all flavors of Markdown are compatible or supported by all frameworks. I'm hesitant creating website material without using a version of Markdown. My preference is using MDX. \u2764\ufe0f Powerful: MDX blends markdown and JSX syntax to fit perfectly in React/JSX-based projects. \ud83d\udcbb Everything is a component: Use existing components inside MDX file and import other MDX files as plain components. \ud83d\udd27 Customizable: Decide which component is rendered for each markdown element. \ud83d\udcda Markdown-based: The simplicity and elegance of markdown remains, JSX is interleaved when you want to. \ud83d\udd25 Blazingly blazing fast: MDX has no runtime, all compilation occurs during the build stage.\"","title":"MDX"},{"location":"languagesref/#meta-open-source","text":"Meta Open Source This website is built with some Meta Open Source software components.","title":"Meta Open Source"},{"location":"languagesref/#docusaurus","text":"Docusaurus generator. It is an open-source website framework created and open-sourced by Meta Open Source . It builds a single-page application with a fast client-side navigation, leveraging React to make websites interactive. Learn more Docusaurus Project Details Features Features this author likes about Docusaurus are: Powered by React , JSX and MDX Extend and customize with React Hot web browser reloading with fast incremental build on edit changes Route-based code and data splitting Heading anchor links Check all links during build process Check for errors by building deployment website on local server, using the same process as the deployment server Local Search - Small and is downloaded to browsers Menus Leftside - menu bar Blog left side - posts Rightside - page / post table of contents","title":"Docusaurus"},{"location":"mat_mkdocs/","text":"Navigation \u00b6 navigation Design Principles \u00b6 Design Principles Alternatives \u00b6 Alternatives Cloudflare \u00b6 pip show mkdocs-material pip install --upgrade mkdocs-material Files \u00b6 root directory requirements.txt mdocs-material==8.5.11 runtime.txt 3.7","title":"Materials for MkDocs"},{"location":"mat_mkdocs/#navigation","text":"navigation","title":"Navigation"},{"location":"mat_mkdocs/#design-principles","text":"Design Principles","title":"Design Principles"},{"location":"mat_mkdocs/#alternatives","text":"Alternatives","title":"Alternatives"},{"location":"mat_mkdocs/#cloudflare","text":"pip show mkdocs-material pip install --upgrade mkdocs-material","title":"Cloudflare"},{"location":"mat_mkdocs/#files","text":"root directory requirements.txt mdocs-material==8.5.11 runtime.txt 3.7","title":"Files"},{"location":"material/","text":"This website is an example of using these application to create and maintain website Markdown text and Troika web programming materials. iA Writer is a mirror of website Markdown text and Troika web programming materials in the local repository. iA Writer is where text material is changed or new text material is created, and kept synchronized with the local repository using ChronoSync. Using iA Writer for editing website material and using Chronosync to synchronizing with the Local Repository seems faster with less errors. iA Writer \u00b6 \"iA Writer offers a unique writing experience that lets you concentrate and clarify your message. Used by half a million people worldwide, its powerful interface is crafted to cut out noise, let you focus on what you want to say, and help you structure and trim your text.\" iA Writer is used to edit website material and blog posts. Using iA Writer is faster website material than using VScode because of markdown features, focus, grammar features, and live preview. iA Writer is a Markdown Writing app: Faster way to write MDX website material Extensive Style Check Focus Sentence Paragraph Available for Mac, iOS, Windows, and Android When one or more pages have been edited using iA Writer, the ChronoSync app is used to synchronize files from iA Writer to VScode or visa versa. Since the iA Writer files are store in iCloud, they can be edited remotely using laptops, smart phones, or pads. Sometimes in the heat of development or defect remediation, changes are made to files in the local repository. Chronosync is used to be synchronized the Local Repository with iA Writer . Chronosync \u00b6 ChronoSync is a comprehensive toolkit for performing file synchronization ChronoSync is used to keep iA Write and the local repository in sync.","title":"Website Material"},{"location":"material/#ia-writer","text":"\"iA Writer offers a unique writing experience that lets you concentrate and clarify your message. Used by half a million people worldwide, its powerful interface is crafted to cut out noise, let you focus on what you want to say, and help you structure and trim your text.\" iA Writer is used to edit website material and blog posts. Using iA Writer is faster website material than using VScode because of markdown features, focus, grammar features, and live preview. iA Writer is a Markdown Writing app: Faster way to write MDX website material Extensive Style Check Focus Sentence Paragraph Available for Mac, iOS, Windows, and Android When one or more pages have been edited using iA Writer, the ChronoSync app is used to synchronize files from iA Writer to VScode or visa versa. Since the iA Writer files are store in iCloud, they can be edited remotely using laptops, smart phones, or pads. Sometimes in the heat of development or defect remediation, changes are made to files in the local repository. Chronosync is used to be synchronized the Local Repository with iA Writer .","title":"iA Writer"},{"location":"material/#chronosync","text":"ChronoSync is a comprehensive toolkit for performing file synchronization ChronoSync is used to keep iA Write and the local repository in sync.","title":"Chronosync"},{"location":"minimum_viable_product/","text":"The first goal of website development projects is a Minimum Viable Product. It is a way to understand whether the website project idea will work or not. It is a stage in website development where the must features are implemented and ready to test with end-users. It gives feedback about the positive aspects and shortcomings. The next steps are adding the want features, until stakeholders agree the website is production quality and ready to be deployment. Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Minimum Viable Product\u200b"},{"location":"preview/","text":"As team members makes changes to their Local Website Repository, they may deploy it to a Private Preview Website for stakeholders to quickly view and give feedback. When team members and stakeholders agree the changes are ready to be added to the Production Website, the team member makes a Central Website Repository update request The repository guardian and other team members evaluating Central Website Repository update requests, may deploy them to a Private Preview Internet Website for stake holders to preview and give feedback. Repository Guardian Preview \u00b6 When the repository guardian and other team members evaluating Central Website Repository update requests changes are ready for deployment, the repository guardian deploys the updated production version of the website to a Private Preview Website for stakeholders to preview and give feedback. When the stakeholders are satisfied with the updated production version, the repository guardian deploys the updated production version of the website to the Internet","title":"Preview Private Website"},{"location":"preview/#repository-guardian-preview","text":"When the repository guardian and other team members evaluating Central Website Repository update requests changes are ready for deployment, the repository guardian deploys the updated production version of the website to a Private Preview Website for stakeholders to preview and give feedback. When the stakeholders are satisfied with the updated production version, the repository guardian deploys the updated production version of the website to the Internet","title":"Repository Guardian Preview"},{"location":"programming/","text":"Languages \u00b6 Troika \u00b6 :::info Troika is a team of three web website programming languages that have become standard for creating web pages, HTML , CSS , and JavaScript . They are interpreted by web browsers to rendering website pages. ::: The job of website development frameworks is to compile the troika and non troika programming languages, such as MDX and JSX, into a combination the standard troika languages to be executed in web browsers. Hypertext Markup Language \u00b6 HTML is used to create websites. It is the standard markup language for browser website pages. It defines the content and structure of website pages. HTML can be assisted by Cascading Style Sheets ( CSS ) to instruct browsers how elements are to be styled and rendered, and JavaScript is for user interactivity. MDX \u00b6 MDX is Markdown for the component era. It enables seamlessly writing JSX in Markdown documents. It is compiled to JSX components, It enables using Markdown\u2019s terse syntax for writing website material, and JSX for components. Markdown is a faster way of creating and maintaining website material. It is a HTLM abstraction that is compiled to web standard HTML John Gruber published the original Markdown Syntax Guide. Different flavors of Markdown have evolved since then. \"Markdown is a better way to write HTML. It is compiled into HTML at deploy time. Markdown is a lightweight plaintext markup language used to add formatting elements to documents. Markdown is now one of the world\u2019s popular markup languages. Using Markdown is different from using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown is not like that. In a Markdown-formatted file. Markdown syntax is added to the text to indicate which words and phrases look different.\" Markdown has been characterized by an informal specification and a reference implementation for conversion to HTML. Over time, many Markdown implementations have appeared. They are driven by the need for additional features like tables, footnotes, definition lists, and HTML inside Markdown blocks. The behavior of additional features diverge from the reference implementation and informal specification, and have attracted attention. Not all flavors of Markdown are compatible or supported by all frameworks. I'm hesitant creating website material without using a version of Markdown. My preference is using MDX. \u2764\ufe0f Powerful: MDX blends markdown and JSX syntax to fit perfectly in React/JSX-based projects. \ud83d\udcbb Everything is a component: Use existing components inside MDX file and import other MDX files as plain components. \ud83d\udd27 Customizable: Decide which component is rendered for each markdown element. \ud83d\udcda Markdown-based: The simplicity and elegance of markdown remains, JSX is interleaved when you want to. \ud83d\udd25 Blazingly blazing fast: MDX has no runtime, all compilation occurs during the build stage.\" Other Languages \u00b6 :::info Other languages besides the Troika are frequently needed to create and deploy websites ::: Some are: Editor commands \u00b6 Website Material \u00b6 Troika MDX Command-line interface \u00b6 Operating system (OS) command-line interfaces are usually distinct programs supplied with the operating system. A program that implements such a text interface is often called a command-line interpreter, command processor or shell. Version Control System \u00b6 git commands GitHub commands Static Static Site Generator commands \u00b6 Deploy commands \u00b6 ::: Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Programming"},{"location":"programming/#languages","text":"","title":"Languages"},{"location":"programming/#troika","text":":::info Troika is a team of three web website programming languages that have become standard for creating web pages, HTML , CSS , and JavaScript . They are interpreted by web browsers to rendering website pages. ::: The job of website development frameworks is to compile the troika and non troika programming languages, such as MDX and JSX, into a combination the standard troika languages to be executed in web browsers.","title":"Troika"},{"location":"programming/#html","text":"HTML is used to create websites. It is the standard markup language for browser website pages. It defines the content and structure of website pages. HTML can be assisted by Cascading Style Sheets ( CSS ) to instruct browsers how elements are to be styled and rendered, and JavaScript is for user interactivity.","title":"Hypertext Markup Language"},{"location":"programming/#mdx","text":"MDX is Markdown for the component era. It enables seamlessly writing JSX in Markdown documents. It is compiled to JSX components, It enables using Markdown\u2019s terse syntax for writing website material, and JSX for components. Markdown is a faster way of creating and maintaining website material. It is a HTLM abstraction that is compiled to web standard HTML John Gruber published the original Markdown Syntax Guide. Different flavors of Markdown have evolved since then. \"Markdown is a better way to write HTML. It is compiled into HTML at deploy time. Markdown is a lightweight plaintext markup language used to add formatting elements to documents. Markdown is now one of the world\u2019s popular markup languages. Using Markdown is different from using a WYSIWYG editor. In an application like Microsoft Word, you click buttons to format words and phrases, and the changes are visible immediately. Markdown is not like that. In a Markdown-formatted file. Markdown syntax is added to the text to indicate which words and phrases look different.\" Markdown has been characterized by an informal specification and a reference implementation for conversion to HTML. Over time, many Markdown implementations have appeared. They are driven by the need for additional features like tables, footnotes, definition lists, and HTML inside Markdown blocks. The behavior of additional features diverge from the reference implementation and informal specification, and have attracted attention. Not all flavors of Markdown are compatible or supported by all frameworks. I'm hesitant creating website material without using a version of Markdown. My preference is using MDX. \u2764\ufe0f Powerful: MDX blends markdown and JSX syntax to fit perfectly in React/JSX-based projects. \ud83d\udcbb Everything is a component: Use existing components inside MDX file and import other MDX files as plain components. \ud83d\udd27 Customizable: Decide which component is rendered for each markdown element. \ud83d\udcda Markdown-based: The simplicity and elegance of markdown remains, JSX is interleaved when you want to. \ud83d\udd25 Blazingly blazing fast: MDX has no runtime, all compilation occurs during the build stage.\"","title":"MDX"},{"location":"programming/#other-languages","text":":::info Other languages besides the Troika are frequently needed to create and deploy websites ::: Some are:","title":"Other Languages"},{"location":"programming/#editor-commands","text":"","title":"Editor commands"},{"location":"programming/#website-material","text":"Troika MDX","title":"Website Material"},{"location":"programming/#command-line-interface","text":"Operating system (OS) command-line interfaces are usually distinct programs supplied with the operating system. A program that implements such a text interface is often called a command-line interpreter, command processor or shell.","title":"Command-line interface"},{"location":"programming/#version-control-system","text":"git commands GitHub commands","title":"Version Control System"},{"location":"programming/#static-static-site-generator-commands","text":"","title":"Static Static Site Generator commands"},{"location":"programming/#deploy-commands","text":"::: Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Deploy commands"},{"location":"remediation/","text":"Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Remediation"},{"location":"team_define/","text":"Defining websites helps the Iterative Development teams and stakeholders understand the project. Define - Prerequisites \u00b6 Defining website prerequisites is the first steps in optimizing website costs Defining what the project is about Funding Purpose Functionality Stakeholders Content The musts and wants features The security requirements","title":"Define Team"},{"location":"team_define/#define-prerequisites","text":"Defining website prerequisites is the first steps in optimizing website costs Defining what the project is about Funding Purpose Functionality Stakeholders Content The musts and wants features The security requirements","title":"Define - Prerequisites"},{"location":"team_deploy/","text":"Deploying a website is making it available on the Internet. The production version is deployed when stakeholders agree. Developers working on features, fixes, or testing may deploy a private Preview website with their changes, without disturbing other developers work or the production version. This enables the stakeholders to monitor progress. See Preview Deployments The slightest errors or security issues during Deploy will require Remediating sometime during the life time of the website Deploy - Prerequisites \u00b6 Decisions about resources required for deploying production version of the website to the Internet Decisions about resources required for team developers working on features, fixes, or testing to deploy private Preview Internet websites with their changes, for stake holders to view and give feedback, without disturbing other developers work or the production version Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Deploy Team"},{"location":"team_deploy/#deploy-prerequisites","text":"Decisions about resources required for deploying production version of the website to the Internet Decisions about resources required for team developers working on features, fixes, or testing to deploy private Preview Internet websites with their changes, for stake holders to view and give feedback, without disturbing other developers work or the production version Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Deploy - Prerequisites"},{"location":"team_design/","text":"The core foundations of a user's website experience are: Fast - Website responds quickly to user interactions with smooth scrolling. Integrated - The website uses the full capabilities of the user device to create an experience true to the device. Reliable - Loads quickly and reliably even in uncertain network conditions. Engaging - Keeps user coming back to a website Design - Prerequisites \u00b6 Decisions about Website Design Consistency Theme Color Scheme Typology Navigation User interaction Design - Website \u00b6 Responsive Website Design The majority of users access websites using mobile devices. Users have little tolerance for slow loading website pages or pages that do not conform to their screen size Ensures pages load quickly Website pages are display correctly on a variety of devices and window or screen size The website look and feel, users experience, and functionality are consistently maintain Consistency website consistency is the look and feel of the site. The users experience, and functionality does not vary between website pages. The website theme is: Color scheme Header Pages Fonts Footer Typology Navigation User interaction Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Design Team"},{"location":"team_design/#design-prerequisites","text":"Decisions about Website Design Consistency Theme Color Scheme Typology Navigation User interaction","title":"Design - Prerequisites"},{"location":"team_design/#design-website","text":"Responsive Website Design The majority of users access websites using mobile devices. Users have little tolerance for slow loading website pages or pages that do not conform to their screen size Ensures pages load quickly Website pages are display correctly on a variety of devices and window or screen size The website look and feel, users experience, and functionality are consistently maintain Consistency website consistency is the look and feel of the site. The users experience, and functionality does not vary between website pages. The website theme is: Color scheme Header Pages Fonts Footer Typology Navigation User interaction Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Design - Website"},{"location":"team_develop/","text":"Translates the Define and Design teams processes into website pages Uses development languages to create website material such as text, graphics, and abstract logical structures. These languages are nonhuman, and strict Configures and uses website development tools Develop - Prerequisites \u00b6 Decisions about resources required to transform the Define and Design work into a website and infrastructure Decisions about static site generator and programming tools Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Website Development"},{"location":"team_develop/#develop-prerequisites","text":"Decisions about resources required to transform the Define and Design work into a website and infrastructure Decisions about static site generator and programming tools Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Develop - Prerequisites"},{"location":"team_maintenance/","text":"Maintain is remediating Define, Design,Develop, Deploy, or Security defects All teams may have members on the Maintain team to solve defects. Hot fixes are immediate fixes required for the production deployment. Problems requiring remediation are triaged. They are ranked from immediate Hot Fixes to those that are not show stoppers. The guardian and stakeholders may choose to Rollback the production deployment to a previous production deployment if triage determines the remediation time is unacceptable. All fixes use the established fork, solution development, pull request processes, and version incrementing, including Hot Fixes. Maintenance - Prerequisites \u00b6 Decisions about remediating deployed websites Organizing members from other teams to be part of the Maintain team while remediating specific defects. Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Maintenance Team"},{"location":"team_maintenance/#maintenance-prerequisites","text":"Decisions about remediating deployed websites Organizing members from other teams to be part of the Maintain team while remediating specific defects. Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Maintenance - Prerequisites"},{"location":"team_overview/","text":"Iterative website Define, Design, Develop, Deploy and Maintenance teams may be operational at the same time creating, testing, and helping with maintenance Teams graph TD dev --- def dev --- des dev --- dep dev --- mnt def --- des dep --- mnt dev([Development]) def([Define]) des([Design]) dep([Deploy]) mnt([Maintenance]) Iterative Development Teams Reach a Minimum Viable Product is the first Development teams goal Team Define Defining websites helps the Iterative Development helps teams and stakeholders understand the project. Team Design Determines the core found ations of a user's website experience are: Team Develop Translates the Define and Design teams processes into website pages Team Deploy Deploys the website making it available on the Internet. The production version is deployed when stakeholders agree. Team Maintenance Remediates the Define, Design, Develop, Deploy, or Security teams defects Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Teams Overview"},{"location":"technology_guide/","text":"A guid to Version Control System technology The core technologies of Iterative Development are Git, GitHub central project repository controlled by the project gatekeeper, and a content delivery network, like Cloudflare , deploying private Preview Internet websites, production websites, and individual team members private Preview websites. Team members use the Website Development Stack to develop and deploy websites to the Internet. GitHub \u00b6 The first thing to do is create a GitHub Account Go to GitHub and sign up for an account Note Remember to use the same e-mail address you used in the Git config GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. GitHub helps answer the questions for the lifetime of the project who changed what, where, when, and why? The GitHub Workflow \u00b6 GitHub workflow is centered on Pull Requests . The GitHub workflow works with collaborating tightly-knit team members contributing to the central project repository using the Forks . It is centered on the topic Branches workflow. A summary of GitHub workflow for team members is: Fork the central project repository creating a local project repository in individual team members GitHub account Clone the forked local project repository in team member GitHub account to workstation Creates a topic branch off the cloned local project repository develop branch Make topic edits and commits Push after each commit to the cloned local project repository in GitHub account Periodicity Pull from the central project repository. The develop branch will have merged accepted Pull Request Deploy local project repository to a private Preview website periodically for stake holders viewing. This reduces the Pull Request evaluation time because stake holders interested in topics can see how they are progressing and working with the website. Open a Pull Request on the GitHub local project repository to begin the process of integrating the local project repository with the central project repository Team members discuss, and optionally continue committing on Pull Requests . The project gatekeeper merges or closes Pull Requests to the central project repository, and deploys the central project repository to a private Preview website for stockholders viewing. The teams and gatekeeper continues the GitHub workflow process until stack holders agree the central project repository is ready for release to the public internet Teams may Pull the central project repository at anytime to view and test other topic branches. Git \u00b6 Reference: Git Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Tip The VScode development environment has several of these and other Git command built-in Basic Git Commands \u00b6 Git Tutorial Branch \u00b6 Git Creating a branch is to safely diverge from a line of development and continuing on another. An example is creating a branch create a feature or to test a radical idea Branching enables working on different parts of a project without impacting other branches. Work on a branch can be merged with other project branches. Switching between branches and work on different projects without them interfering with each other. Branching in Git is lightweight and fast! Fork \u00b6 Git GitHub Fork A fork is GitHub command to copy a project repository in a GitHub account. Forks let team members make changes to a project without affecting the original repository or other team members. Team members can fetch updates from the project repository with a pull command Forks are used to either propose changes to someone else's project to which you do not have write access, or to use someone else's project as a starting point for your own idea. You can fork a repository to create a copy of the repository and make changes without affecting the upstream repository Forking a repository is similar to copying a repository, with two major differences: You can use a pull request to suggest changes from your user-owned fork to the original repository in its GitHub instance, also known as the upstream repository. You can bring changes from the upstream repository to your local fork by synchronizing your fork with the upstream repository. Fork a Repo Clone \u00b6 Git Clone from GitHub A clone is a full copy of a repository, including all logging and versions of files, copied from the team member GitHub account to team member workstation. Commits keep the team member local project repository up to date on the workstation and on GitHub. If the workstation copy is damaged, the latest commit can be cloned from GitHubto the workstation. Checkout \u00b6 Switch \u00b6 A quick way of switching branch on Git is to use the git switch command and specify the name of the branch you want to switch to. If the destination branch does not exist, you have to specify the \u201c-c\u201d option (for \u201ccreate branch\u201c), otherwise you will get an error message when switching to that branch. git switch <existing_branch> git switch -c <non_existing_branch> Again, as an example, let\u2019s say that you want to switch to the feature branch from the main branch. In order to switch from the main branch to the feature branch, use the \u201cgit switch\u201d command and specify the destination branch (which is \u201cfeature\u201d in this case) it switch feature switch branch using git switch On the other hand, if you try to switch to a non existing branch, you will get the following error message $ git switch non-existing-branch fatal: invalid reference: non-existing-branch To solve this error, make sure to append the \u201c-c\u201d option to the \u201cgit switch\u201d command to specify that you want to switch to a new branch. $ git switch -c non-existing-branch Switched to a new branch 'non-existing-branch' Congratulations, you have now successfully switched to another branch and you can start working on it. Stage \u00b6 Git Staging Environment One of the core functions of Git is the concepts of the Staging Environment, and the Commit. Staged files are files that are ready to be committed to the repository. Commit \u00b6 Git Commit Commits keep track of project changes. A message is required. Who changed what, where, when, and why is logged to the project history. Commit messages matter. Here's How to Write a Git Commit Message . Push \u00b6 Git Push to GitHub Pull \u00b6 Pull requests let teams tell others about changes that have been pushed to a branch in their GitHub account forked project repository. Once a pull request is opened by the project team gatekeeper, teams can discuss and review the potential changes with collaborators and add follow-up commits before changes are merged into the website central project repository. About pull requests Restore \u00b6 restores a previous version of a file while staying on the same branch Git Utilities \u00b6 Website Development \u00b6 A guid to Website Development technology MkDocs \u00b6 MkDocs Materials for MkDocs \u00b6 Materials for MkDocs Command and Control \u00b6 A guide to VScode","title":"Technology Guide"},{"location":"technology_guide/#github","text":"The first thing to do is create a GitHub Account Go to GitHub and sign up for an account Note Remember to use the same e-mail address you used in the Git config GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. GitHub helps answer the questions for the lifetime of the project who changed what, where, when, and why?","title":"GitHub"},{"location":"technology_guide/#the-github-workflow","text":"GitHub workflow is centered on Pull Requests . The GitHub workflow works with collaborating tightly-knit team members contributing to the central project repository using the Forks . It is centered on the topic Branches workflow. A summary of GitHub workflow for team members is: Fork the central project repository creating a local project repository in individual team members GitHub account Clone the forked local project repository in team member GitHub account to workstation Creates a topic branch off the cloned local project repository develop branch Make topic edits and commits Push after each commit to the cloned local project repository in GitHub account Periodicity Pull from the central project repository. The develop branch will have merged accepted Pull Request Deploy local project repository to a private Preview website periodically for stake holders viewing. This reduces the Pull Request evaluation time because stake holders interested in topics can see how they are progressing and working with the website. Open a Pull Request on the GitHub local project repository to begin the process of integrating the local project repository with the central project repository Team members discuss, and optionally continue committing on Pull Requests . The project gatekeeper merges or closes Pull Requests to the central project repository, and deploys the central project repository to a private Preview website for stockholders viewing. The teams and gatekeeper continues the GitHub workflow process until stack holders agree the central project repository is ready for release to the public internet Teams may Pull the central project repository at anytime to view and test other topic branches.","title":"The GitHub Workflow"},{"location":"technology_guide/#git","text":"Reference: Git Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Tip The VScode development environment has several of these and other Git command built-in","title":"Git"},{"location":"technology_guide/#basic-git-commands","text":"Git Tutorial","title":"Basic Git Commands"},{"location":"technology_guide/#branch","text":"Git Creating a branch is to safely diverge from a line of development and continuing on another. An example is creating a branch create a feature or to test a radical idea Branching enables working on different parts of a project without impacting other branches. Work on a branch can be merged with other project branches. Switching between branches and work on different projects without them interfering with each other. Branching in Git is lightweight and fast!","title":"Branch"},{"location":"technology_guide/#fork","text":"Git GitHub Fork A fork is GitHub command to copy a project repository in a GitHub account. Forks let team members make changes to a project without affecting the original repository or other team members. Team members can fetch updates from the project repository with a pull command Forks are used to either propose changes to someone else's project to which you do not have write access, or to use someone else's project as a starting point for your own idea. You can fork a repository to create a copy of the repository and make changes without affecting the upstream repository Forking a repository is similar to copying a repository, with two major differences: You can use a pull request to suggest changes from your user-owned fork to the original repository in its GitHub instance, also known as the upstream repository. You can bring changes from the upstream repository to your local fork by synchronizing your fork with the upstream repository. Fork a Repo","title":"Fork"},{"location":"technology_guide/#clone","text":"Git Clone from GitHub A clone is a full copy of a repository, including all logging and versions of files, copied from the team member GitHub account to team member workstation. Commits keep the team member local project repository up to date on the workstation and on GitHub. If the workstation copy is damaged, the latest commit can be cloned from GitHubto the workstation.","title":"Clone"},{"location":"technology_guide/#checkout","text":"","title":"Checkout"},{"location":"technology_guide/#switch","text":"A quick way of switching branch on Git is to use the git switch command and specify the name of the branch you want to switch to. If the destination branch does not exist, you have to specify the \u201c-c\u201d option (for \u201ccreate branch\u201c), otherwise you will get an error message when switching to that branch. git switch <existing_branch> git switch -c <non_existing_branch> Again, as an example, let\u2019s say that you want to switch to the feature branch from the main branch. In order to switch from the main branch to the feature branch, use the \u201cgit switch\u201d command and specify the destination branch (which is \u201cfeature\u201d in this case) it switch feature switch branch using git switch On the other hand, if you try to switch to a non existing branch, you will get the following error message $ git switch non-existing-branch fatal: invalid reference: non-existing-branch To solve this error, make sure to append the \u201c-c\u201d option to the \u201cgit switch\u201d command to specify that you want to switch to a new branch. $ git switch -c non-existing-branch Switched to a new branch 'non-existing-branch' Congratulations, you have now successfully switched to another branch and you can start working on it.","title":"Switch"},{"location":"technology_guide/#stage","text":"Git Staging Environment One of the core functions of Git is the concepts of the Staging Environment, and the Commit. Staged files are files that are ready to be committed to the repository.","title":"Stage"},{"location":"technology_guide/#commit","text":"Git Commit Commits keep track of project changes. A message is required. Who changed what, where, when, and why is logged to the project history. Commit messages matter. Here's How to Write a Git Commit Message .","title":"Commit"},{"location":"technology_guide/#push","text":"Git Push to GitHub","title":"Push"},{"location":"technology_guide/#pull","text":"Pull requests let teams tell others about changes that have been pushed to a branch in their GitHub account forked project repository. Once a pull request is opened by the project team gatekeeper, teams can discuss and review the potential changes with collaborators and add follow-up commits before changes are merged into the website central project repository. About pull requests","title":"Pull"},{"location":"technology_guide/#restore","text":"restores a previous version of a file while staying on the same branch","title":"Restore"},{"location":"technology_guide/#git-utilities","text":"","title":"Git Utilities"},{"location":"technology_guide/#website-development","text":"A guid to Website Development technology","title":"Website Development"},{"location":"technology_guide/#mkdocs","text":"MkDocs","title":"MkDocs"},{"location":"technology_guide/#materials-for-mkdocs","text":"Materials for MkDocs","title":"Materials for MkDocs"},{"location":"technology_guide/#command-and-control","text":"A guide to VScode","title":"Command and Control"},{"location":"vscode/","text":"Info Visual Studio Code (VScode) is a Microsoft product. It has become the goto editor for many. It is free, built on open source, and runs everywhere. Introduction Videos VScode - Details is the command and control center for the website development stack. The development command and control tasks are: Editing Markdown web programming materials Use GitHub and Git - Details . Git is built-in and optimized to work with Microsoft GitHub Editor tool extensions continually check for syntax and other errors Live edit browser previews show how edits will look when deployed Deploy secure website previews to the Internet for stakeholders Deploy production website to the Internet Built-in command shell And much more Extensions \u00b6 Some useful extensions are: Dark+ Material. The default Dark+ theme, using Material's color palette GitHub Repositories. Remotely browse and edit any GitHub repository Lorem Text Generator Lorem text generator extension for VScode Markdown All in One All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more) Rainbow Brackets Provide rainbow colors for the round brackets, the square brackets and the squiggly brackets Todo Tree This extension quickly searches the local repository workspace for comment tags like TODO and FIXME, and displays them in a tree view in the activity bar VScode -icons Icons for Visual Studio Code Git Client \u00b6 VScode built-in git commands : Review diffs, Stage files Make commits Push pull and more Git Desktop \u00b6 Alternatives to using built-in VScode git commands is to use the built in terminal or GitHub Desktop . It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. GitHub Desktop and VSCode documents how to use GitHub Desktop with VScode .","title":"Visual Studio Code"},{"location":"vscode/#extensions","text":"Some useful extensions are: Dark+ Material. The default Dark+ theme, using Material's color palette GitHub Repositories. Remotely browse and edit any GitHub repository Lorem Text Generator Lorem text generator extension for VScode Markdown All in One All you need for Markdown (keyboard shortcuts, table of contents, auto preview and more) Rainbow Brackets Provide rainbow colors for the round brackets, the square brackets and the squiggly brackets Todo Tree This extension quickly searches the local repository workspace for comment tags like TODO and FIXME, and displays them in a tree view in the activity bar VScode -icons Icons for Visual Studio Code","title":"Extensions"},{"location":"vscode/#git-client","text":"VScode built-in git commands : Review diffs, Stage files Make commits Push pull and more","title":"Git Client"},{"location":"vscode/#git-desktop","text":"Alternatives to using built-in VScode git commands is to use the built in terminal or GitHub Desktop . It abstract Github and more Git commands. It interacts with GitHub using a GUI instead of the command line or a web browser. GitHub Desktop and VSCode documents how to use GitHub Desktop with VScode .","title":"Git Desktop"},{"location":"website_dev_stack/","text":"Abstract The Iterative Website Development Stack illustrates how websites are developed by teams and deployed to the Internet. It is web browser agnostic. What works for big screens, works for small screens. flowchart TB crepo --- cdn cdn --- net dev --- vsc github --- crepo github --- net vsc --- lrepo net --- prevweb net --- proweb vsc --- net vsc --- mkd mkd --- lpreweb dev([Team Developers]) cdn([CDN - Deploy Website to Web]) crepo([Central Website Repository]) github([GitHub]) lrepo([Local Website Repository]) lpreweb([Local Preview Website]) mkd([Mkdocs Material - Static Site Generator]) net([Internet]) prevweb([Stake Holders Private Preview Website]) proweb([Production Website]) vsc([VScode - Command and Control]) Iterative Website Development Stack The Iterative Development teams use the Iterative Website Development Stack technologies The core technologies of Iterative WebsiteDevelopment are Git , the GitHu GitHub central project repository controlled by the project gatekeeper, using Local Website Repository, the content delivery network, like Cloudflare, to deploying private Preview Internet websites, production websites, and . The core technologies of Iterative Development are Git , GitHub, and the Central Website Repository controlled by the project gatekeeper, and a Content Delivery Network (CDN), like Cloudflare, deploying Private Preview Internet websites, production websites, and individual team members Private Preview websites. Team Developers \u00b6 Local Website Repository Each team developer has their own Local Website Repository that can be updated from the Central Website Repository. Team members cannot update the Central Web Repository directly. They submit their changes. The approved changes by the project gatekeeper are added to the Central Website Repository. Team members can then update their Local Website Repository. VScode Developers use VSCode as their Web Development Stack Command and Control center. They use it to edit code using their Local Website Repository, commit changes to the Central Website Repository, refresh their Local Website Repository, and deploy Private Preview Internet websites for themselves and stake holders to view and give feedback GitHub \u00b6 GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project The Central Website Repository is managed by a team member project gatekeeper with help from other team members Reference GitHub Details MkDocs Material - Static Site Generator \u00b6 Is a Static Site Generator used to build a website from Repository to create: A Local Preview Website for the developer The Production Website deployed to the Internet Stake Holders Private Preview Website It is also used by the Content Delivery network(CDN) do build and deploy the production website from the Central Repository Content Delivery Network (CDN) A \"MkDocs Static Site Generator\" tools are used to create the \"Production Website\" by the \"CDN - Deploy Website to Web\" ===== GitHubQ Central Repository. The core technologies of Iterative Development are Git, GitHub, and the Central Website Repository controlled by the project gatekeeper, and a content delivery network, like Cloudflare, deploying private Preview Internet websites, production websites, and individual team members private Preview websites. GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. The Central Repository is managed my a team member It helps answer the questions for the lifetime of the project who changed what, where, when, and why? Team members use the Website Development Stack to develop and deploy websites to the Internet. There would be confusion and possible defects created if Team members were to directly make changes to the central project repository. A solution to this problem is to have one central repository controlled by a team member gatekeeper. Each team member forks a copy of central project repository to their GetHub account and makes a clone of it on their workstation. Each developer makes changes to their repository clone . They cannot directly make changes to the central repository. Team members commit changes to their local repository clone They may deploy their local repository to a private Preview Internet website for stakeholders to see and give feedback. The process is managed using GitHub for Teams . When stakeholders determine developers changes, defect fixes, or new features are ready, a GitHub Pull Request is made by developers to the central project repository. Project team members and the gatekeeper are notified by GitHub of the Pull Request request. They may examine, comment on, suggest possible changes, and test the code. When the team agrees on committed developers changes, they are committed to the central project repository by the gatekeeper. This process is repeated for all developer committed changes. Iterations of the central project repository may be deployed by the gatekeeper to a private Preview for stakeholders viewing. The next step is each developer Pulls the central repository changes and commits them to their local repository copy of the central project. This process keeps team members up to date on changes. The central project repository may be deployed to the public Internet by the gatekeeper after stakeholders agree there have been sufficient development and testing iterations. Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"Dev Stack Overview"},{"location":"website_dev_stack/#team-developers","text":"Local Website Repository Each team developer has their own Local Website Repository that can be updated from the Central Website Repository. Team members cannot update the Central Web Repository directly. They submit their changes. The approved changes by the project gatekeeper are added to the Central Website Repository. Team members can then update their Local Website Repository. VScode Developers use VSCode as their Web Development Stack Command and Control center. They use it to edit code using their Local Website Repository, commit changes to the Central Website Repository, refresh their Local Website Repository, and deploy Private Preview Internet websites for themselves and stake holders to view and give feedback","title":"Team Developers"},{"location":"website_dev_stack/#github","text":"GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted Central Website Repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes, and helps answer the questions who changed what, where, when, and why for the lifetime of the project The Central Website Repository is managed by a team member project gatekeeper with help from other team members Reference GitHub Details","title":"GitHub"},{"location":"website_dev_stack/#mkdocs-material-static-site-generator","text":"Is a Static Site Generator used to build a website from Repository to create: A Local Preview Website for the developer The Production Website deployed to the Internet Stake Holders Private Preview Website It is also used by the Content Delivery network(CDN) do build and deploy the production website from the Central Repository Content Delivery Network (CDN) A \"MkDocs Static Site Generator\" tools are used to create the \"Production Website\" by the \"CDN - Deploy Website to Web\" ===== GitHubQ Central Repository. The core technologies of Iterative Development are Git, GitHub, and the Central Website Repository controlled by the project gatekeeper, and a content delivery network, like Cloudflare, deploying private Preview Internet websites, production websites, and individual team members private Preview websites. GitHub is a Distributed Version Control Systems enabling multiple teams to work separately on the same project without having an impact on the work of others. GitHub manages an online web hosted central project repository containing all project files. It is a unified source of truth. It helps teams collaborate and maintain the entire history of project file changes. The Central Repository is managed my a team member It helps answer the questions for the lifetime of the project who changed what, where, when, and why? Team members use the Website Development Stack to develop and deploy websites to the Internet. There would be confusion and possible defects created if Team members were to directly make changes to the central project repository. A solution to this problem is to have one central repository controlled by a team member gatekeeper. Each team member forks a copy of central project repository to their GetHub account and makes a clone of it on their workstation. Each developer makes changes to their repository clone . They cannot directly make changes to the central repository. Team members commit changes to their local repository clone They may deploy their local repository to a private Preview Internet website for stakeholders to see and give feedback. The process is managed using GitHub for Teams . When stakeholders determine developers changes, defect fixes, or new features are ready, a GitHub Pull Request is made by developers to the central project repository. Project team members and the gatekeeper are notified by GitHub of the Pull Request request. They may examine, comment on, suggest possible changes, and test the code. When the team agrees on committed developers changes, they are committed to the central project repository by the gatekeeper. This process is repeated for all developer committed changes. Iterations of the central project repository may be deployed by the gatekeeper to a private Preview for stakeholders viewing. The next step is each developer Pulls the central repository changes and commits them to their local repository copy of the central project. This process keeps team members up to date on changes. The central project repository may be deployed to the public Internet by the gatekeeper after stakeholders agree there have been sufficient development and testing iterations. Defects The slightest configuration, programming or security defect issues during the project will require Remediating and increasing overall lifetime costs","title":"MkDocs Material - Static Site Generator"},{"location":"workstations/","text":"Info Workstations are the key hardware for website developers Overview \u00b6 Web site development is not easy, time consuming, and expensive. Optimizing the website development environment is critical. The key hardware for website developers are terminals. They need to be: - Fast - Reliable - Supportable - Secure - Support Large or Multiple Screens - Run Software Development Applications The contemporary choice for web development workstations are Apple, Linux, and Microsoft. I have experience building web sites with purchased and bare metal built Linux systems and bare metal built Microsoft systems. I use apple products for exploring Internet technologies and creating web sites. Traditionally these companies built workstation products with Intel processors. They are diversifying their product line with ARM-based and RISC-architecture processors Apple \u00b6 Apple is a computer manufacturing company delivering workstation products with Apple developed macOS certified UNIX operating systems. Apple recently released the first Mac products built with the ARM-based, Apple silicon designed, processors, and the macOS Big Sur operating system engineered to use M1 chip capabilities. The last Apple processor transition was the Motorola 68000 to the Intel x86. It took time for Apple vendors and users to update their hardware and software to run on the x86. Apple created the Rosetta translation application that ran Motorola 68000 binary code on x86 machines. The M1 translation layer Rosetta 2, is about 80% the speed of the of native Apple Silicon code. The single-core Rosetta 2 benchmark running on a low end M1 MacBook Air with 8GB of RAM, is faster than other x86 Mac machines in single core benchmark. The M1 MacBook Air running native is faster than any competitors top of the line x86 machine, except for a couple. Apple products prices may be higher than their competitors. It is mitigated by the quality of hardware and software, robustness, security, and vendor support. Any unnecessary web developer workstation downtime is expensive. The advantages of Apple products are robustness, reliability, security, speed, vendor hardware and software support, and relative ease to use. Apple has responsibility for maintaining hardware and software products from sale to retirement. Apple Stores and other services are equipped to diagnose and repair Apple products. Operating systems updates have been free for years, and Apple continues to have the highest customer satisfaction in the industry. Linux \u00b6 Linux is an examples of free and open-source software collaboration. The source code may be used, modified and distributed commercially or non-commercially by anyone under the terms of its respective licenses Linux is the leading operating system on web servers. Its greatest success in the consumer market is mobile device. Android being one of the dominant smartphones Linux-based operating system There are a some Linux vendor supported hardware platforms or Linux software distributions. The diversity of Linux distributions means that not all software or hardware runs all distributions or applications. Software and software repositories may be specific to a particular distribution Not all peripheral device vendors suport Linux. The Linux open-source community supplies several missing device drivers. The price of Linux-based systems is attractive. The operating system software is free. Ready-made hardware platforms are available, or can be bare metal built by choosing hardware and software components, and having the skills to assemble and maintain them. The robustness, reliability, security, and speed of Linux systems varies from low to high, depending on the knowledge and skills of the vendors, builders and maintainers Responsibility for maintaining Linux workstation hardware, operating systems, and device drivers is fragmented or doesn't exist, except from the vendors, builders and maintainers There are computer repair services that are equipped to diagnosed and repaired Linux systems, but not to the extent of Apple Stores Microsoft \u00b6 Many companies sell hardware platforms with Microsoft Windows installed. Many peripheral device vendors support Windows drivers. Consumer versions of Windows were originally designed for ease-of-use on a single-user PC without a network connection, and did not have security features built in from the outset. Windows updates are regularly improving security. Windows is one of hackers prime data hunting grounds, even with frequent security updates. Windows systems are everywhere and stores or has access to vast amounts of data. There are Windows installations that do not keep Windows updated. One reason may be issues with updates. Microsoft Windows update problem 2021 are recent examples. The reliability, robustness, security, and supportability of Microsoft systems varies from low to high, depending on the knowledge and skills of vendors, builders and maintainers. The combinations and permutations of vendor hardware platforms, software applications, and peripheral vendors and device support, may be contributing to Microsoft Windows update problems. There are computer repair services that are equipped to diagnosed and repaired Windows systems, but not to the extent of Apple Stores.","title":"Workstations"},{"location":"workstations/#overview","text":"Web site development is not easy, time consuming, and expensive. Optimizing the website development environment is critical. The key hardware for website developers are terminals. They need to be: - Fast - Reliable - Supportable - Secure - Support Large or Multiple Screens - Run Software Development Applications The contemporary choice for web development workstations are Apple, Linux, and Microsoft. I have experience building web sites with purchased and bare metal built Linux systems and bare metal built Microsoft systems. I use apple products for exploring Internet technologies and creating web sites. Traditionally these companies built workstation products with Intel processors. They are diversifying their product line with ARM-based and RISC-architecture processors","title":"Overview"},{"location":"workstations/#apple","text":"Apple is a computer manufacturing company delivering workstation products with Apple developed macOS certified UNIX operating systems. Apple recently released the first Mac products built with the ARM-based, Apple silicon designed, processors, and the macOS Big Sur operating system engineered to use M1 chip capabilities. The last Apple processor transition was the Motorola 68000 to the Intel x86. It took time for Apple vendors and users to update their hardware and software to run on the x86. Apple created the Rosetta translation application that ran Motorola 68000 binary code on x86 machines. The M1 translation layer Rosetta 2, is about 80% the speed of the of native Apple Silicon code. The single-core Rosetta 2 benchmark running on a low end M1 MacBook Air with 8GB of RAM, is faster than other x86 Mac machines in single core benchmark. The M1 MacBook Air running native is faster than any competitors top of the line x86 machine, except for a couple. Apple products prices may be higher than their competitors. It is mitigated by the quality of hardware and software, robustness, security, and vendor support. Any unnecessary web developer workstation downtime is expensive. The advantages of Apple products are robustness, reliability, security, speed, vendor hardware and software support, and relative ease to use. Apple has responsibility for maintaining hardware and software products from sale to retirement. Apple Stores and other services are equipped to diagnose and repair Apple products. Operating systems updates have been free for years, and Apple continues to have the highest customer satisfaction in the industry.","title":"Apple"},{"location":"workstations/#linux","text":"Linux is an examples of free and open-source software collaboration. The source code may be used, modified and distributed commercially or non-commercially by anyone under the terms of its respective licenses Linux is the leading operating system on web servers. Its greatest success in the consumer market is mobile device. Android being one of the dominant smartphones Linux-based operating system There are a some Linux vendor supported hardware platforms or Linux software distributions. The diversity of Linux distributions means that not all software or hardware runs all distributions or applications. Software and software repositories may be specific to a particular distribution Not all peripheral device vendors suport Linux. The Linux open-source community supplies several missing device drivers. The price of Linux-based systems is attractive. The operating system software is free. Ready-made hardware platforms are available, or can be bare metal built by choosing hardware and software components, and having the skills to assemble and maintain them. The robustness, reliability, security, and speed of Linux systems varies from low to high, depending on the knowledge and skills of the vendors, builders and maintainers Responsibility for maintaining Linux workstation hardware, operating systems, and device drivers is fragmented or doesn't exist, except from the vendors, builders and maintainers There are computer repair services that are equipped to diagnosed and repaired Linux systems, but not to the extent of Apple Stores","title":"Linux"},{"location":"workstations/#microsoft","text":"Many companies sell hardware platforms with Microsoft Windows installed. Many peripheral device vendors support Windows drivers. Consumer versions of Windows were originally designed for ease-of-use on a single-user PC without a network connection, and did not have security features built in from the outset. Windows updates are regularly improving security. Windows is one of hackers prime data hunting grounds, even with frequent security updates. Windows systems are everywhere and stores or has access to vast amounts of data. There are Windows installations that do not keep Windows updated. One reason may be issues with updates. Microsoft Windows update problem 2021 are recent examples. The reliability, robustness, security, and supportability of Microsoft systems varies from low to high, depending on the knowledge and skills of vendors, builders and maintainers. The combinations and permutations of vendor hardware platforms, software applications, and peripheral vendors and device support, may be contributing to Microsoft Windows update problems. There are computer repair services that are equipped to diagnosed and repaired Windows systems, but not to the extent of Apple Stores.","title":"Microsoft"},{"location":"znotes/","text":"mkdocs materials \u00b6 Navigation \u00b6 navigation Design Principles \u00b6 Design Principles Alternatives \u00b6 Alternatives","title":"Znotes"},{"location":"znotes/#mkdocs-materials","text":"","title":"mkdocs materials"},{"location":"znotes/#navigation","text":"navigation","title":"Navigation"},{"location":"znotes/#design-principles","text":"Design Principles","title":"Design Principles"},{"location":"znotes/#alternatives","text":"Alternatives","title":"Alternatives"}]}